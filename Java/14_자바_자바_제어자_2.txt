[final 제어자]
필드, 지역 변수, 메서드, 클래스 앞에 위치할 수 있으며, 어디에 위치하느냐에 따라 의미가 다름
처음 지정된 값을 바꿀 수 없음(최초 선언된 이후 값을 대입할 수 없음)

final 필드, final 지역 변수는 값의 변경 뿐만 아니라 추가적인 값의 대입 자체가 불가함

final 필드, final 지역 변수의 메모리 구조 :
객체 생성시 final 필드는 final 영역에 복사. Stack 메모리에 final 지역 변수 초기화 시 final 영역에 복사

Q. final 변수는 언제 많이 사용할까?
ANS. 이벤트를 처리할 때 지역 변수를 final로 선언해야 하는 경우가 자주 있음. 스택 메모리의 변숫값은 자신이 만들어진 메서드가 종료되면 메모리에서 사라짐. 하지만 이벤트를 처리할 때 메모리에서 사라진 그 변수를 나중에 사용해야 할 때가 있음. 그래서 한 번 생성하면 사라지지 않는 영역인 상수 영역에 복사해 놓는 것
// 어떤 필요에 따라 복사본을 하나 만들어 놓음으로써 원본이 삭제된 이후에도 그 값을 활용할 수 있도록 하는 것이 final 변수(필드, 지역 변수)의 기능

final 메서드와 final 클래스 :
final 메서드(최종 메서드의 의미) → 상속시 Override 불가
// 상속할 때 부모의 메서드를 오버라이딩하면 자식 클래스에서는 메서드의 기능이 변경됨. final 메서드는 이렇게 메서드의 기능을 변경할 수 없는 메서드. 즉, 메서드를 final로 정의하면 자식 클래스에서 해당 메서드를 오버라이딩 할 수 없음
final 클래스(최종 클래스의 의미) → 상속 자체가 불가
// final 클래스 역시 최종 클래스의 의미로 더 이상 자식 클래스가 없다는 것을 의미. 따라서 final 클래스는 상속 자체가 아예 불가능

[abstract 제어자]
추상 메서드(abstract method) : 메서드의 본체가 완성되지 않은 미완성 메서드. 메서드의 기능을 정의하는 중괄호 안이 비어 있다는 것이 아니라 중괄호 자체가 없으며, 중괄호가 없기 때문에 명령어의 끝을 알리는 세미콜론(;)으로 끝나야 함

추상 메서드의 구조 :
abstract 리턴 타입 메서드명(입력 매개 변수);

abstract void abc(); // 기능을 정의하는 중괄호({}) 생략. 세미콜론(;)으로 끝남