[Program vs. Process vs. Thread의 개념]
컴퓨터 구조 :
CPU (중앙 처리 장치. 고속)
↕
Memory (용량은 작고, 속도는 빠름) : CPU랑 이야기하는 저장 장치
↑
Hard Disk (용량은 크고, 속도는 느림) → (하드디스크에 설치한 프로그램을 실행(CPU 사용)하기 위해서는 하드디스크의 내용을 메모리로 올려야 함 (Loading)) → Memory (Loading된 프로그램 = 프로세스(Process)) ↔ CPU

Q. 말이 빠른 사람과 느린 사람이 대화하면 누구 속도에 맞춰질까?
ANS. 느린 사람 (CPU는 Hard Disk와는 직접 이야기 하지 않음. CPU는 Memory와만 이야기)

프로그램(program) : 하드디스크에 저장된 파일들의 모임
프로세스(process) : 메모리상에 로딩된 프로그램을 의미 (동일한 프로그램을 메모리에 2번 로딩하면 2개의 프로세스가 동작하는데 이를 멀티 프로세스(multi-process)라 함)

[Process의 구조]
CPU ↔ Memory(Process(Thread)) // 단일 쓰레드 프로세스
CPU ↔ Memory(Process(Thread)) / Memory(Process(Thread)) // 멀티 쓰레드 프로세스

CPU는 Memory와만 이야기 → CPU는 Memory 내의 Process와만 이야기 → CPU는 Memory 내의 Process 내에 있는 Thread와만 이야기 → Thread는 CPU를 사용하는 최소 단위

Q. Thread가 없는 Process가 있을까?
ANS. CPU를 사용하지 않는 프로그램

[Java Program에서의 Thread]
JVM (main Thread 생성) .class 파일 실행 → Process(main Thread) (시작 시점에는 main Thread 1개만 존재. 이후 main Thread에서 thread를 생성/실행하면 멀티 쓰레드) → (Thread 생성/실행) → Process

[Multi-Thread의 필요성]
멀티 쓰레드를 사용하지 않을 때, 즉 단일 쓰레드로 2개의 작업을 처리할 때 각 작업은 순차적(sequential)으로 처리 (먼저 시작된 작업이 완전히 종료된 이후에 두 번째 작업이 실행)
멀티 쓰레드에서는 동시성(Concurrency)과 병렬성(Parallelism)을 갖고 수행 (사용자는 동시에 동작하는 것으로 인식)
동시성(Concurrency) : 작업수 > CPU 코어수
병렬성(Parallelism) : 작업수 < CPU 코어수

[Thread 생성 방법]
방법 1 : Thread class를 상속받아 run() 메서드 재정의
STEP 1. 클래스 정의 : Thread class를 상속받아 run() 메서드 오버라이딩한 클래스(또는 익명 이너 클래스) 정의
STEP 2. 객체 생성 : Thread 객체 생성
STEP 3. 쓰레드 실행 : start() 메서드를 이용해 Thread 실행
// start() = 새로운 쓰레드 생성/추가하기 위한 모든 준비 + 새로운 쓰레드 위에 run() 실행

Q. run()을 재정의했지만 start()로 Thread를 실행하는 이유?
ANS. start()는 새로운 쓰레드 생성/추가를 위한 모든 준비 + 새로운 쓰레드 위에 run() 실행이기 때문 (run()을 호출해도 오류는 없지만 단일 쓰레드 내에서 동작)

방법 2 : Runnable interface 구현 객체를 생성한 후 Thread 생성자로 Runnable 객체 전달
STEP 1. 클래스 정의 : Runnable interface를 구현한 클래스 정의 (추상메서드 run() 구현)
STEP 2. 객체 생성 : Runnable 객체 생성 → Thread 객체 생성 (생성자에 Runnable 객체 전달)
STEP 3. 쓰레드 실행 : start() 메서드를 이용해 Thread 실행

Q. Runnable 객체에서 바로 start() 하지 않는 이유?
ANS. Runnable은 함수적 인터페이스로 내부에 start() 메서드가 없어 start()를 위해서 Thread 객체가 필요함

[Thread 실행 방법]
Thread class의 start() 메서드 호출
// 주의 : 재정의한 메서드는 run()이지만 Thread의 실행은 start() 메서드로 호출. Thread 객체는 재사용 할 수 없음 (하나의 객체는 한번만 start() 가능)

public class CreateAndStartThread {
public static void main(String[] args) {

Thread thread1 = new Thread(new Runnable() {
@Override
public void run() {
String[] strArray = { "하나", "둘", "셋", "넷", "다섯" };
try {
Thread.sleep(10);
} catch (InterruptedException e1) {
}
for (int i = 0; i < strArray.length; i++) {
System.out.println("(자막 번호) " + strArray[i]);
try {
Thread.sleep(200);
} catch (InterruptedException e) {
}
}
}
});

Thread thread2 = new Thread(new Runnable() {
@Override
public void run() {
int[] intArray = { 1, 2, 3, 4, 5 };

for (int i = 0; i < intArray.length; i++) {
System.out.println("(비디오 프레임) " + intArray[i]);
try {
Thread.sleep(200);
} catch (InterruptedException e) {
}
}
}
});

thread1.start();
thread2.start();
}
}

Thread의 속성 (Thread 객체 가져오기 / 이름 / Thread 개수 / 우선 순위 / 데몬 설정)
현재 Thread 객체 참조 (Thread 클래스의 정적 메서드) :
static Thread Thread.currentThread() // Thread 참조 객체가 없는 경우 사용 (main() 쓰레드처럼 내가 직접 만든 쓰레드가 아니거나 참좃값에 집어 넣지 않고 객체를 생성하자마자 실행하는 경우에는 참조 객체가 없음)

실행 중인 Thread 개수 가져오기 (Thread 클래스의 정적 메서드) :
static int Thread.activeCount() // 같은 ThreadGroup(생성된 쓰레드는 자신을 생성한 쓰레드와 같은 그룹에 속함) 내의 active thread 수

Thread 이름 설정 및 가져오기 (Thread 클래스의 인스턴스 메서드) :
String setName(String name) // Thread의 이름 설정하기
String getName() // Thread의 이름 가져오기
// 쓰레드의 이름을 지정하지 않은 경우 thread-0, thread-1, ..., thread-N과 같이 번호를 하나씩 증가시키면서 이름 자동 부여

Thread 객체 우선 순위 가져오기 (Thread 클래스의 인스턴스 메서드)
int getPriority() // Thread의 우선 순위(Priority) 가져오기

Thread 객체 우선 순위 정하기 (Thread 클래스의 인스턴스 메서드)
void setPriority(int priority) // Thread의 우선 순위(Priority) 설정하기
10 - 가장 높음 - Thread.MAX_PRIORITY
5 - 기본값(Default) - Thread.NORM_PRIORITY
1 - 가장 낮음 - Thread.MIN_PRIORITY

우선 순위(Priority) : 동시성(concurrency)을 가지고 동시에 할당되는 time slot에 비례하는 값

현재 시스템의 CPU 코어수 가져오기 : Runtime.getRuntime().availableProcessors()

데몬 Thread 설정 (Thread 클래스의 인스턴스 메서드) :
void setDeamon(boolean on)

데몬 Thread 설정 확인 :
boolean isDaemon()
// on이 true인 경우 Deamon Thread Default 값은 false : 일반 Thread
// 주의 : setDeamon()은 반드시 start() 전에 호출

일반 쓰레드는 주 쓰레드 종료 여부와 상관없이 자신의 쓰레드가 종료되어야 프로세스 종료
데몬 쓰레드는 일반 쓰레드(사용자 쓰레드)가 모두 종료되면 작업이 완료되지 않았어도 함께 종료 (데몬 쓰레드는 main 쓰레드를 포함하여 모든 일반 쓰레드가 종료해야 함께 종료됨)

[동기화(synchronizied)의 의미]
하나의 작업이 완전히 완료된 후 다른 작업 수행
// cf. 비동기식 : 하나의 작업 명령 이후(완료와 상관없이) 바로 다른 작업 명령을 수행

동기화(synchronizied)의 필요성 : 두 개의 Thread가 하나의 객체를 공유하는 경우

문제점의 해결책 : 공유 객체를 한번에 하나의 Thread만 사용할 수 있도록 함 (하나의 Thread가 사용 중일때는 객체를 lock) 즉, 다음 순서로 진행

[동기화(synchronized) 방법]
방법 1 : 메서드 동기화(synchronized method) (동시에 두 개의 Thread가 동기화 메서드 사용 불가)
접근 지정자 synchronized 리턴 타입 메서드명(입력 매개 변수) {
// 동기화가 필요한 코드
}

방법 2 : 블록 동기화(synchronized block) (동시에 두 개의 Thread가 동기화 블록 사용 불가)
synchronized(임의의 객체) {
// 동기화가 필요한 코드
}
// 임의의 객체 : key를 가진 객체 (모든 객체는 저마다의 key 하나를 가지고 있음) 일반적으로 클래스 내부에서 바로 사용할 수 있는 객체는 this를 사용

[동기화(synchronized)의 원리]
모든 객체는 단 하나의 열쇠를 가지고 있음
동기화(synchronized)를 사용하면 처음 사용하는 Thread가 key객체의 key를 가짐
동기화 메서드 : 자기 자신의 객체(this)
동기화 블록 : synchronized(key객체){}에서 사용한 key 객체
다른 Thread는 먼저 사용중인 Thread가 작업을 완료하고 key를 반납할 때까지 대기(Blocked)

[Thread의 상태(State)]
쓰레드의 상태 값 가져오기 (Thread 클래스의 인스턴스 메서드) :
Thread.State getState() // Thread의 상태 값은 enum 타입인 Thread.State 객체로 리턴
enum 상수 → NEW / RUNNABLE / TERMINATED / TIMED_WAITING / BLOCKED / WAITING

쓰레드의 상태에 따른 동작 수행 :
Thread.State state = myThread.getState();
switch (state) {
case Thread.State.NEW;
// ...
case Thread.State.RUNNABLE;
// ...
case Thread.State.TERMINATED;
// ...
case Thread.State.TIMED_WAITING;
// ...
case Thread.State.BLOCKED;
// ...
case Thread.State.WAITING;
// ...
}

NEW // Thread myThread = new MyThread()
↓ myThread.start()
RUNNABLE (실행 대기 ↔ 실행) // Thread.yield()
(TIMED WAITING) ↓ Thread.sleep(1000) / join(1000) ↑ 시간 종료 interrupt()
(BLOCKED) ↓ 사용 객체 Lock ↑ 사용 객체 UnLock
(WAITING) ↓ join() / wait() ↑ notify() / notifyAll() // (wait(), notify(), notifyAll()은 Object 메서드, 사용은 동기화 블록에서만 가능)
↓ run() 완료
TERMINATED

쓰레드의 6가지 상태 (NEW / RUNNABLE / TERMINATED / TIMED_WAITING / BLOCKED / WAITING)
1. NEW : new를 통해 Thread의 객체가 생성된 상태 (start() 전)

2. RUNNABLE (실행대기 ↔ 실행) : start() 이후 CPU를 사용할 수 있는 상태. 다른 Thread들과 동시성(concurrency)에 따라 실행과 실행 대기를 교차함 // Thread.yield() 정적 메서드 : 다른 쓰레드에게 CPU 사용을 양보하고 자신은 실행 대기 상태로 전환

class MyThread extends Thread {
boolean yieldFlag;

@Override
public void run() {
while (true) {
if (yieldFlag) {
Thread.yield();
} else {
System.out.println(getName() + " 실행");
for (long i = 0; i < 100000000; i++) {
}
}
}
}
}

public class YieldInRunnableState {
public static void main(String[] args) {

MyThread thread1 = new MyThread();
thread1.setName("thread1");
thread1.yieldFlag = false;
thread1.setDaemon(true);
thread1.start();

MyThread thread2 = new MyThread();
thread2.setName("thread2");
thread2.yieldFlag = true;
thread2.setDaemon(true);
thread2.start();

// 6초 지연 (1초마다 한번씩 양보)
for (int i = 0; i < 6; i++) {
try {
Thread.sleep(1000);
} catch (InterruptedException e) {
}
thread1.yieldFlag = !thread1.yieldFlag;
thread2.yieldFlag = !thread2.yieldFlag;
}
}
}

3. TERMINATED : run() 메서드의 작업 내용이 모두 완료되어 Thread가 종료된 상태. 한 번 실행(start())된 Thread는 재실행은 불가능하며 새롭게 객체를 생성하여야 함

public class NewRunnableTerminated {
public static void main(String[] args) {

// 쓰레드 상태 저장 클래스
Thread.State state;

// 1. 객체 생성 (NEW)
Thread thread = new Thread() {
@Override
public void run() {
for (long i = 0; i < 100000000; i++) { // 시간 지연
}
}
};
state = thread.getState();
System.out.println("thread state = " + state); // thread state = NEW

// 2. Thread 시작
thread.start();
state = thread.getState();
System.out.println("thread state = " + state); // thread state = RUNNABLE

// 3. Thread 종료
try {
thread.join();
} catch (InterruptedException e) {
}
state = thread.getState();
System.out.println("thread state = " + state); // thread state = TERMINATED
}
}

4. TIMED_WAITING : 정적 메서드인 Thread.sleep(long millis) 또는 인스턴스 메서드인 join(long millis)가 호출되면 쓰레드는 TIMED_WAITING 상태가 됨 (이 상태에서는 CPU를 사용할 수 없음)
// RUNNABLE → TIMED_WAITING 상태로 전환하기 1 : static void Thread.sleep(long millis) // sleep(시간)을 호출한 쓰레드가 설정한 시간 동안 일시정지 상태 유지
// RUNNABLE → TIMED_WAITING 상태로 전환하기 2 : static void join(long millis) // thread1.join(시간)을 호출하면 지정 시간 동안 Thread1이 CPU를 사용하며 호출한 쓰레드는 일시정지 상태

만일 설정한 일시정지 시간이 지나거나 중간에 interrupt() 메서드가 호출되면 다시 RUNNABLE 상태가 됨
// TIMED_WAITING → RUNNABLE 상태로 전환하기 1 : 일시정지 시간이 종료
class MyThread extends Thread {
@Override
public void run() {
try {
Thread.sleep(3000);
} catch (InterruptedException e) {
System.out.println("-- sleep() 진행중 interrupt() 발생 --");
for (long i = 0; 0 < 100000000; i++) { // 시간 지연
}
}
}
}

public class TimedWaiting_Sleep {
public static void main(String[] args) {

MyThread myThread = new MyThread();
myThread.start();
try {
Thread.sleep(100); // 쓰레드 시작 준비 시간
} catch (InterruptedException e) {
}
System.out.println("MyThread State = " + myThread.getState()); // MyThread State = TIMED_WAITING

myThread.interrupt();
try {
Thread.sleep(100); // 쓰레드 시작 준비 시간
} catch (InterruptedException e) {
}
System.out.println("MyThread State = " + myThread.getState()); // MyThread State = RUNNABLE
}
}

// TIMED_WAITING → RUNNABLE 상태로 전환하기 2 : void interrupt() // InterruptedException 예외를 발생시켜 일시정지 상태를 탈출
class MyThread1 extends Thread {
@Override
public void run() {
for (long i = 0; 0 < 100000000; i++) { // 시간 지연
}
}
}

class MyThread2 extends Thread {
MyThread1 myThread1;

public MyThread2(MyThread1 myThread1) {
this.myThread1 = myThread1;
}

@Override
public void run() {
try {
myThread1.join(3000);
} catch (InterruptedException e) {
System.out.println("-- sleep() 진행중 interrupt() 발생 --");
for (long i = 0; 0 < 100000000; i++) { // 시간 지연
}
}
}
}

public class TimedWaiting_Join {
public static void main(String[] args) {

// 객체 생성
MyThread1 myThread1 = new MyThread1();
MyThread2 myThread2 = new MyThread2(myThread1);
myThread1.start();
myThread2.start();

try {
Thread.sleep(100); // 쓰레드 시작 준비 시간
} catch (InterruptedException e) {
}
System.out.println("MyThread1 State = " + myThread1.getState()); // MyThread1 State = RUNNABLE
System.out.println("MyThread2 State = " + myThread2.getState()); // MyThread2 State = TIMED_WAITING

myThread2.interrupt();
System.out.println("MyThread1 State = " + myThread1.getState()); // MyThread1 State = RUNNABLE
System.out.println("MyThread2 State = " + myThread2.getState()); // MyThread2 State = RUNNABLE
}
}

5. BLOCKED : BLOCKED는 동기화 메서드 또는 동기화 블록을 실행하고자 할 때 이미 다른 쓰레드가 해당 영역을 실행하고 있는 경우 발생. 이렇게 해당 동기화 영역이 잠겨(lock) 있을 때는 이미 실행하고 있는 쓰레드가 실행을 완료하고 해당 동기화 영역의 열쇠를 반납할 때까지 기다려야 하는데 이것이 바로 BLOCKED 상태 (일시정지 상태를 나타내며 이 상태에서는 CPU를 사용할 수 없음. 사용 객체의 잠금이 풀리고 사용을 위한 열쇠를 획득하면 RUNNABLE 상태로 전환)
// 유의할 점 : 몇 번째로 BLOCKED 상태에 빠졌는지는 전혀 중요하지 않으며 열쇠가 반납되는 순간 BLOCKED 상태의 모든 쓰레드가 다시 경쟁해 열쇠를 먼저 차지하는 쓰레드가 실행되는 것

class MyBlockTest {
MyClass mc = new MyClass();

Thread t1 = new Thread("thread1") {
public void run() {
mc.syncMethod();
};
};

Thread t2 = new Thread("thread2") {
public void run() {
mc.syncMethod();
};
};

Thread t3 = new Thread("thread3") {
public void run() {
mc.syncMethod();
};
};

void startAll() {
t1.start();
t2.start();
t3.start();
}

class MyClass {
synchronized void syncMethod() {
try {
Thread.sleep(100);
} catch (InterruptedException e) {
}
System.out.println("==== " + Thread.currentThread().getName() + " ====");
System.out.println("thread1 -> " + t1.getState());
System.out.println("thread2 -> " + t2.getState());
System.out.println("thread3 -> " + t3.getState());

for (long i = 0; i < 100000000; i++) {
}
}
}
}

public class BlockedState {
public static void main(String[] args) {

MyBlockTest mbt = new MyBlockTest();
mbt.startAll();
}
}

6. WAITING : 먼저 일시정지하는 시간의 지정 없이 쓰레드 객체.join() 메서드를 호출하면 조인된 쓰레드 객체의 실행이 완료될 때까지 이를 호출한 쓰레드는 WAITING 상태가 됨. 이때는 조인된 쓰레드가 완료되거나 interrupt() 메서드 호출로 예외를 인위적으로 발생시켰을 때만 다시 RUNNABLE 상태로 돌아갈 수 있음
// RUNNABLE → WAITING 상태로 전환하기 1 : synchronized void join()
// RUNNABLE → WAITING 상태로 전환하기 2 : void wait()

join() 메서드의 호출로 WAITING 상태가 됐을 때는 TIMED_WAITING일 때와 마찬가지로 join()의 대상이 된 쓰레드가 종료되거나 외부에서 interrupt() 메서드가 호출되면 다시 RUNNABLE 상태로 돌아감
// join() 메서드로 WAITING 상태가 됐을 때 WAITING → RUNNABLE 상태로 전환하기 1 : join()의 대상 쓰레드가 종료
// join() 메서드로 WAITING 상태가 됐을 때 WAITING → RUNNABLE 상태로 전환하기 2 : void interrupt()

wait() 메서드의 호출로 WAITING 상태가 됐을 때는 Object 클래스의 notify() 또는 notifyAll() 메서드를 이용해 다시 RUNNABLE 상태로 돌아감
// wait() 메서드로 WAITING 상태가 됐을 때 WAITING → RUNNABLE 상태로 전환하기 : void notify() // notify()는 WAITING 상태에 있는 하나의 쓰레드를 RUNNABLE 상태로 전환하는 메서드
// wait() 메서드로 WAITING 상태가 됐을 때 WAITING → RUNNABLE 상태로 전환하기 : void notifyAll() // notifyAll()은 WAITING 상태의 모든 쓰레드를 RUNNABLE 상태로 전환하는 메서드
// wait(), notify(), notifyAll()은 동기화 블록 내에서만 사용할 수 있음

적용 예시 :
data1, data2, data3, data4, data5, data6, data7, data8
↓
SetThread (데이터를 하나 꺼내 객체에 저장(set)하는 역할)
↓
data(데이터 하나를 저장할 수 있는 객체)
↓
GetThread(객체의 데이터를 하나씩 꺼내 읽는(get) 역할)
↓
data8, ..., data2, data1

Without wait() / notify() : 데이터를 쓰는 속도와 데이터를 읽는 속도 다름 (호출할 때마다 열쇠를 얻기 위해 경쟁. 번갈아가면서 실행되는 것이 아니라 자유 경쟁에서 승리한 쓰레드가 랜덤하게 나옴)
With wait() / notify() : 데이터 쓰기 → 데이터 읽기의 순으로 진행 // wait()-notify(), notifyAll()

class DataBox {
boolean isEmpty = true;
int data;

synchronized void inputData(int data) {
if (!isEmpty) {
try {
wait(); // WAITING
} catch (InterruptedException e) {
}
}
this.data = data;
isEmpty = false;
System.out.println("입력 데이터 : " + data);
notify();
}

synchronized void outputData() {
if (isEmpty) {
try {
wait(); // WAITING
} catch (InterruptedException e) {
}
}
isEmpty = true;
System.out.println("출력 데이터 : " + data);
notify();
}
}

public class Waiting_WaitNotify {
public static void main(String[] args) {

DataBox dataBox = new DataBox();
Thread t1 = new Thread() {
@Override
public void run() {
for (int i = 0; i < 9; i++) {
dataBox.inputData(i);
}
}
};

Thread t2 = new Thread() {
@Override
public void run() {
for (int i = 0; i < 9; i++) {
dataBox.outputData();
}
}
};

t1.start();
t2.start();
}
}
// 쓰기 쓰레드에서 호출하는 inputData() 메서드에서는 isEmpty 불리언 값을 이용해 데이터가 비어 있는지 검사. 만일 isEmpty = true이면 데이터 값이 비어 있는 것으로 판단해 매개 변수로 넘어온 데이터 값을 필드에 복사한 후 isEmpty = false로 변경하고 WAITING 상태의 읽기 쓰레드를 RUNNABLE 상태로 바꾸기 위한 notify() 메서드를 호출. 이와 반대로 isEmpty = false이면 쓰기를 완료한 데이터를 아직 읽기 쓰레드가 읽지 않은 것으로 간주해 wait() 메서드를 실행함으로써 자신은 WAITING 상태가 됨. WAITING 상태가 되면 당연히 열쇠는 반납하게 되며 이 열쇠를 차지한 읽기 쓰레드가 동기화 영역을 실행할 것
// 읽기 쓰레드는 쓰기 쓰레드와는 반대로 isEmpty = true이면 아직 읽을 데이터가 없는 것이므로 자신은 열쇠를 반납하고 WAITING 상태가 됨. 이와 반대로 isEmpty = false이면 읽을 데이터가 있다는 것이므로 해당 데이터를 출력한 후 isEmpty = true로 변환하고 쓰기 쓰레드를 RUNNABLE 상태로 변환시키기 위한 notify() 메서드를 호출
// 정리 : 1. 쓰기 쓰레드 동작 (데이터 쓰기) → 2. 읽기 쓰레드 깨우기 (notify()) → 3. 쓰기 쓰레드 일시정지(wait()) → 4. 읽기 쓰레드 동작 (데이터 읽기) → 5. 쓰기 쓰레드 깨우기 (notify()) → 6. 읽기 쓰레드 일시정지 (wait()) → 7. 1~6 반복