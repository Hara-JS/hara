[컬렉션(Collection) 프레임워크(Framework)의 개념과 구조]
컬렉션 : 동일한 타입을 묶어서 관리하는 자료 구조. 저장 공간의 크기(capacity)를 동적으로 관리

프레임워크 : 클래스와 인터페이스의 모임(라이브러리). 클래스의 정의에 설계의 원칙 또는 구조가 존재

컬렉션 프레임워크 : 리스트, 스택, 큐, 트리 등의 자료 구조에 정렬, 탐색 등의 알고리즘을 구조화 해 놓은 프레임워크

Q. 동일한 타입을 묶어서 관리하는 자료 구조라면 배열과의 차이점은?
ANS. 배열의 2가지 특징 :
1. 동일한 타입만 묶어서 저장 가능
2. 생성 시 크기를 지정하여야 하며 추후 변경 불가 (컬렉션과의 차이점)

[컬렉션 프레임워크를 이루는 주요 클래스 및 인터페이스와 구현 클래스]
(interface) Collection<E>
↑ (interface) List<E>
(class) ArrayList<E>
(class) Vector<E> ← (class) Stack<E>
(class) LinkedList<E>
↑ (interface) Queue<E>
↑ (interface) Set<E>
(class) HashSet<E>
(class) LinkedHashSet<E>
(class) TreeSet<E>

(interface) Map<K, V>
(class) HashMap<K, V>
(class) LinkedHashMap<K, V>
(class) HashTable<K, V>
(class) TreeMap<K, V>

[List<E> 컬렉션 인터페이스]
List<E> 컬렉션의 공통 특성 :
배열 : 저장 공간 크기 고정
리스트 : 저장 공간 크기 동적 변환

대표적인 List<E> 인터페이스 구현 클래스 :
List<E>
↑
ArrayList<E> / Vector<E> / LinkedList<E>

[List<E> 컬렉션의 객체 생성]
방법 1 : List<E> interface의 구현 클래스 생성자로 동적 컬렉션 생성 (데이터의 추가 삭제 가능)
List<제네릭 타입 지정> 참조 변수 = new ArrayList<제네릭 타입 지정>();
List<제네릭 타입 지정> 참조 변수 = new Vector<제네릭 타입 지정>();
List<제네릭 타입 지정> 참조 변수 = new LinkedList<제네릭 타입 지정>();
ArrayList<제네릭 타입 지정> 참조 변수 = new ArrayList<제네릭 타입 지정>();
Vector<제네릭 타입 지정> 참조 변수 = new Vector<제네릭 타입 지정>();
LinkedList<제네릭 타입 지정> 참조 변수 = new LinkedList<제네릭 타입 지정>();
// 기본 생성자의 경우 원소 10개를 저장할 수 있는 저장 공간(capacity) 확보. 추후 원소가 많아지면 저장 공간을 자동 추가. 생성자 매개 변수로 저장 공간의 크기를 직접 넘겨줄 수 있음 (단, LinkedList<E>는 제외) 주의 : Capacity는 메모리 공간만을 의미하며 컬렉션의 크기(size())와는 무관

방법 2 : Arrays.asList(T...) 메서드를 이용하여 정적 컬렉션 생성 (데이터의 추가(add) 삭제(remove) 불가능, 데이터의 변경(set)은 가능) (고정된 데이터를 저장하고 활용하고자 할 때 사용)
List<제네릭 타입 지정> 참조 변수 = Arrays.asList(제네릭 타입 저장 데이터);

List<E> 컬렉션의 특징 : 배열처럼 수집(collect)한 원소(Element)를 인덱스(index)로 관리

[List<E> 인터페이스의 주요 메서드] // List<E>의 구현 클래스는 아래의 모든 메서드를 포함
구분 / 리턴 타입 / 메서드명 / 기능
데이터 추가 / boolean / add(E element) / 매개 변수로 입력된 원소를 리스트 마지막에 추가
데이터 추가 / void / add(int index, E element) / index 위치에 입력된 원소 추가
데이터 추가 / boolean / addAll(Collection<? Extends E> c) / 매개 변수로 입력된 컬렉션 전체를 마지막에 추가
데이터 추가 / boolean / addAll(int index, Collection<? Extends E> c) / index 위치에 입력된 컬렉션 전체를 추가
데이터 변경 / E / set(int index, E element) / index 위치에 원소값을 입력된 원소로 변경
데이터 삭제 / E / remove(int index) / index 위치의 원소값 삭제
데이터 삭제 / boolean / remove(Object o) / 원소 중 매개 변수 입력과 동일한 객체 삭제
데이터 삭제 / void / clear() / 전체 원소 삭제
리스트 데이터 정보 추출 / E / get(int index) / index 위치의 원소값을 꺼내어 리턴
리스트 데이터 정보 추출 / int / size() / 리스트 객체 내에 포함된 원소의 개수
리스트 데이터 정보 추출 / boolean / isEmpty() / 리스트의 원소가 하나도 없는지 여부를 리턴
리스트 배열 변환 / Object[] / toArray() / 리스트를 Object 배열로 변환
리스트 배열 변환 / T[] / toArray(T[] t) / 입력 매개 변수로 전달한 타입의 배열로 변환

list의 size() >= 배열의 length // list의 size 크기를 가지는 배열 생성
list의 size() < 배열의 length // 배열 length 크기를 가지는 배열 생성

[ArrayList<E>]
List<E> 인터페이스를 구현한 구현 클래스
배열처럼 수집(collect)한 원소(element)를 인덱스(index)로 관리하며 저장 용량(capacity)을 동적관리 (디폴트 값은 10이며 원소가 10을 넘는 경우 자동으로 저장 공간 확대)

[Vector<E>]
ArrayList<E>와의 공통점 :
동일한 타입의 객체 수집(collection)
메모리의 동적 할당
데이터의 추가, 변경, 삭제 등의 메서드

ArrayList<E>와의 다른점 :
모든 메서드가 동기화(synchronized) 메서드로 구현되어 멀티 쓰레드에 적합 (Thread Safe)

[LinkedList<E>]
ArrayList<E>와의 공통점 :
동일한 타입의 객체 수집(collection)
메모리의 동적 할당
데이터의 추가, 변경, 삭제 등의 메서드

ArrayList<E>와의 다른점 :
디폴트 저장공간(10)만 사용하며 생성자로 저장 공간의 크기 지정 불가
// List<E> aLinkedList1 = new LinkedList<Integer>(); // (O)
// List<E> aLinkedList1 = new LinkedList<Integer>(20); // (X)
데이터의 내부 저장 방식이 index가 아닌 앞뒤 객체의 위치 정보를 저장

구분 / ArrayList<E> / LinkedList<E>
추가(add), 삭제(remove) / 속도 늦음 / 속도 빠름
검색(get) / 속도 빠름 / 속도 늦음

[List Summary]
ArrayList<E> : 저장 용량 자동 추가. index로 요소 관리
Vector<E> : ArrayList와 동일한 특징. 내부 메서드 동기화 적용 (멀티 쓰레드 안전성)
LinkedList<E> : 앞뒤 요소(element) 정보로 데이터 위치 관리. 추가/삭제 속도 빠름. index 정보가 없어 검색 느림

// currentTimeMillis() 메서드와 nanoTime() 메서드
System 클래스의 정적 메서드. System.currentTimeMillis()는 1970년 1월 1일 00시 00분과 현재 시간과의 차이를 ms(밀리초, 1/1000초) 단위로 리턴(long형)하는 메서드. System.nanoTime()은 현재 시간 정보와는 관계 없으며 상대적인 시간 차이를 나노초(10-9초) 단위로 구하는 데 사용되는 메서드. 일반적으로 다음과 같이 시간 측정이 필요한 모듈의 앞뒤에 System.nanoTime() 메서드를 호출해 시간 정보를 나노초 단위로 추출한 후 실행 시간을 차잇값을 이용해 측정함
long startTime = System.nanoTime();
// 시간 측정 대상 모듈
long endTime = System.nanoTime();
// 측정 시간(ns) = endTime - startTime;

[Set<E> 컬렉션 인터페이스]
Set<E> 컬렉션의 특징 :
집합의 개념으로 인덱스 정보를 포함하고 있지 않음 (List<E>와 비교하면 index가 포함된 메서드가 없음)
중복 저장 불가 (인덱스 정보가 없기 때문에 중복된 원소 중 특정 위치 값을 꺼낼 방법이 없음. 심지어 null 값도 한 개만 포함가능) // 중복 여부를 확인하기 위해선 같음을 비교할 수 있어야 함
// 중복 저장 가능/불가능을 판단하는 기준 : 중복된 특정 원소 중 하나를 특정하여 꺼낼 수 있는지 여부

대표적인 Set<E> 인터페이스 구현 클래스 :
Set<E>
↑
HashSet<E> / LinkedHashSet<E> / TreeSet<E>

[Set<E> 컬렉션의 주요 메서드] // Set<E>의 구현 클래스는 아래의 모든 메서드를 포함
구분 / 리턴 타입 / 메서드명 / 기능
데이터 추가 / boolean / add(E element) / 매개 변수로 입력된 원소를 리스트에 추가
데이터 추가 / boolean / addAll(Collection<? Extends E> c) / 매개 변수로 입력된 컬렉션 전체를 추가
데이터 삭제 / boolean / remove(Object o) / 원소 중 매개 변수 입력과 동일한 객체 삭제
데이터 삭제 / void / clear() / 전체 원소 삭제
데이터 정보 추출 / boolean / isEmpty() / Set 객체가 비워져있는지 여부를 리턴
데이터 정보 추출 / boolean / contains(Object o) / 매개 변수로 입력된 원소가 있는지 여부를 리턴
데이터 정보 추출 / int / size() / 리스트 객체 내에 포함된 원소의 개수
데이터 정보 추출 / Iterator<E> / iterator() / Set 객체 내의 데이터를 연속하여 꺼내는 Iterator 객체 리턴
Set 객체 배열 변환 / Object[] / toArray() / 리스트를 Object 배열로 변환
Set 객체 배열 변환 / T[] / toArray(T[] t) / 입력 매개 변수로 전달한 타입의 배열로 변환
// Iterator<T>의 대표적인 메서드
리턴 타입 / 메서드명 / 기능
boolean / hasNext() / 다음으로 가리킬 원소의 존재 여부를 불리언으로 리턴
E / next() / 다음 원소 위치로 가서 읽은 값을 리턴

[HashSet<E>]
Set<E> 인터페이스를 구현한 구현 클래스
수집(collect)한 원소(Element)를 집합의 형태로 관리하며 저장 용량(capacity)을 동적으로 관리 (디폴트 값은 16이며 원소가 16을 넘는 경우 자동으로 저장 공간 확대)
입력의 순서와 출력의 순서는 동일하지 않을 수 있음

중복 확인 메커니즘 이해를 위한 사전 지식
hashCode()의 개념 + 등가 연산(==)과 equals() 메서드의 차이점
hashCode(), equals() → Object 클래스의 메서드 → 모든 클래스 내에 포함

해쉬코드는 객체를 기반으로 생성된 고유값 (실제 번지와는 다름) // 패키지명.클래스명@해쉬코드
Object의 equals()는 ==와 동일한 연산 (저장 번지 비교)

HashSet<E>에서의 중복 확인 메커니즘
STEP 1 : hashCode() 동일한지 확인
STPE 2 : equals() 결과가 true인지 확인
동일 객체의 정의를 위해서는 hashCode()와 equals() 메서드 overriding 필요

Objects.hash(Object... values) → 매개 변수 값에 따른 해쉬값 리턴 → 동일 매개 변수 + 동일 순서 → 동일 해쉬
다른 표현 → return (new Integer(data)).hashCode() 또는 return data

[LinkedHashSet<E>]
Set<E> 인터페이스를 구현한 구현 클래스 (HashSet<E>의 자식 클래스, HashSet의 모든 기능 사용 가능)
수집(collect)한 원소(Element)를 집합의 형태로 관리하며 저장 공간(capacity)을 동적 관리
입력 순서와 출력의 순서는 동일 (단, 중복 원소의 경우 추가되지 않음)

[TreeSet<E>]
Set<E> 인터페이스를 구현한 구현 클래스
수집(collect)한 원소(Element)를 집합의 형태로 관리하며 저장 공간(capacity)을 동적 관리
입력 순서와 관계없이 크기순(오름차순)으로 출력 (저장 원소(Element)는 대소비교가 가능해야 함)
TreeSet은 이진 트리(binary tree)를 기반으로 한 Set 컬렉션
이진 트리는 여러 개의 노드(node)가 트리 형태로 연결된 구조로 루트 노드(root node)라고 불리는 하나의 노드에서 시작해 각 노드에 최대 2개의 노드를 연결할 수 있는 구조

TreeSet<E> = Set<E>의 기본 기능 + 정렬/검색 기능추가

Set (interface)
↑
SortedSet (interface)
↑
NavigableSet (interface)
↑
TreeSet (class)
// TreeSet<E>는 다른 구현 클래스와 달리 NavigableSet<E>와 SortedSet<E>를 부모 인터페이스로 두고 있음. 이 두 인터페이스에서 TreeSet<E>의 가장 중요한 기능인 정렬과 검색 기능이 추가로 정의된 것. 따라서 TreeSet<E> 생성자로 객체를 생성해도 Set<E> 타입으로 선언하면 추가된 정렬 및 검색 기능을 사용할 수 없음. 즉, TreeSet<E>로 선언해야 SortedSet<E>와 NavigableSet<E>애서 추가된 정렬 및 검색 메서드를 호출할 수 있음

Set<E>으로 객체 타입을 선언하는 경우 추가된 정렬/검색 기능 사용 불가
Set<String> treeSet = new TreeSet<String>();
treeSet._ // Set<E> 메서드만 사용가능

추가된 정렬 기능을 사용하기 위해선 TreeSet<E> 객체 타입 선언
TreeSet<String> treeSet = new TreeSet<String>();
treeSet._ // Set<E> 메서드 + 추가된 정렬/검색 기능 메서드 사용 가능

[Set<E> 기본 메서드 이외에 TreeSet<E>에서 추가로 사용할 수 있는 정렬/검색 메서드]
구분 / 리턴 타입 / 메서드명 / 기능
데이터 검색 / E / first() / Set 원소들 중 가장 작은(lowest) 원소값 리턴
데이터 검색 / E / last() / Set 원소들 중 가장 큰(highest) 원소값 리턴
데이터 검색 / E / lower(E element) / 매개 변수로 입력된 원소보다 작은 가장 큰 수
데이터 검색 / E / higher(E element) / 매개 변수로 입력된 원소보다 큰 가장 작은 수
데이터 검색 / E / floor(E element) / 매개 변수로 입력된 원소보다 같거나 작은 가장 큰 수
데이터 검색 / E / ceiling(E element) / 매개 변수로 입력된 원소보다 같거나 큰 가장 작은 수
데이터 꺼내기 / E / pollFirst() / Set 원소들 중 가장 작은(lowest) 원소값을 꺼내어 리턴
데이터 꺼내기 / E / pollLast() / Set 원소들 중 가장 큰(highest) 원소값을 꺼내어 리턴
데이터 부분 집합(SubSet) 생성 / SortedSet<E> / headSet(E toElement) / 매개 변수보다 작은 모든 원소들로 구성된 Set을 리턴 (디폴트 : 매개 변수값 미포함)
데이터 부분 집합(SubSet) 생성 / NavigableSet<E> / headSet(E toElement, boolean inclusive) / 첫 번째 매개 변수보다 작은 모든 원소들로 구성된 Set을 리턴. 두 번째 매개 변수 값에 따라 첫 번째 매개 변수 포함 여부 결정 (inclusive = true이면 toElement 포함, inclusive = false이면 toElement 미포함)
데이터 부분 집합(SubSet) 생성 / SortedSet<E> / tailSet(E fromElement) / 매개 변수보다 큰 모든 원소들로 구성된 Set을 리턴 (디폴트 : 매개 변수값 포함)
데이터 부분 집합(SubSet) 생성 / NavigableSet<E> / tailSet(E fromElement, boolean inclusive) / 첫 번째 매개 변수보다 큰 모든 원소들로 구성된 Set을 리턴. 두 번째 매개 변수 값에 따라 첫 번째 매개 변수 포함 여부 결정 (inclusive = true이면 fromElement 포함, inclusive = false이면 fromElement 미포함)
데이터 부분 집합(SubSet)생성 / SortedSet<E> / subSet(E fromElement, E toElement) / 첫 번째 매개 변수보다 크고 두 번째 매개 변수보다 작은 원소들로 이루어진 Set을 리턴 (디폴트 : fromElement 포함, toElement 미포함)
데이터 부분 집합(SubSet) 생성 / NavigableSet<E> / subSet(E fromElement, boolean frominclusive, E toElement, boolean toinclusive) / 첫 번째 매개 변수보다 크고 세 번째 매개 변수보다 작은 원소들로 이루어진 Set을 리턴. 두 번째와 네 번째 매개 변수 값에 따라 첫 번째와 세 번째 원소의 포함 여부 결정 (디폴트 : fromElement 포함, toElement 미포함)
데이터 정렬 / NavigableSet<E> / descendingSet() / 내림차순의 의미가 아니라 현재 정렬 기준을 반대로 변환

[TreeSet<E>에서 크기 비교]
크다/작다의 기준을 제공해주어야 함
방법1 : java.lang.Comparable<T> interface 구현
int compareTo(T t) 추상 메서드 포함(함수적 인터페이스)
매개 변수 t보다 작은 경우 : -1
매개 변수 t와 같은 경우 : 0
매개 변수 t보다 큰 경우 : 1

방법 2 : TreeSet 생성자 매개 변수로 java.util.Comparator<T> 인터페이스 객체 제공
int compare(T t1, T t2) 추상 메서드 포함
t1 < t2 인 경우 : -1
t1 = t2 인 경우 : 0
t1 > t2 인 경우 : 1

[Set<E> Summary]
HashSet<E> : hashCode(), equals()를 통해 중복 체크. 입력 순서와 출력 순서 다름
LinkedHashSet<E> : HashSet의 기본 기능 포함. 입력 순서와 출력 순서 같음
TreeSet : Set<E>의 기본 기능 + 정렬/검색 기능 추가. 출력 순서 (오름차순)

[Map<K, V> 컬렉션 인터페이스]
Map<K, V> 컬렉션의 특징 :
Key와 Value 한 쌍(Map.Entry)으로 데이터를 저장
Key는 중복 저장 불가, Value는 중복 가능 (Key가 다르기 때문에 각각의 동일한 값을 구분하여 가져올 수 있음 (즉, value는 중복 허용)
Collection과는 별개의 interface임 (List, Set과 기본 메서드 다름)

Map<K, V>의 대표적인 구현 클래스 :
Map<K, V>
↑
HashMap<K, V> / LinkedHashMap<K, V> / Hashtable<K, V> / TreeMap<K, V>

[Map<K, V> 컬렉션의 주요 메서드] // Map<K, V>의 구현 클래스는 아래의 모든 메서드를 포함
구분 / 리턴 타입 / 메서드명 / 기능
데이터 추가 / V / put(K key, V value) / 입력 매개 변수 key, value를 Map 객체에 추가
데이터 추가 / void / putAll(Map<? extends K, ? extends V> m / 입력 매개 변수의 Map 객체를 통째로 추가
데이터 변경 / V / replace(K key, V value) / Key 값에 해당하는 값을 value로 변경 (old값 리턴) (단, 해당 key가 없으면 null 리턴)
데이터 변경 / boolean / replace(K key, V oldValue, V newValue) / (key, oldValue)의 쌍을 가지는 엔트리에서 값을 newValue로 변경 (단, 해당 엔트리가 없으면 false를 리턴)
데이터 정보 추출 / V / get(Object key) / 매개 변수의 key 값에 해당하는 value 값을 리턴
데이터 정보 추출 / boolean / containsKey(Object key) / 매개 변수의 key 값이 포함되어 있는지 여부
데이터 정보 추출 / boolean / containsValue(Object value) / 매개 변수의 value 값이 포함되어 있는지 여부
데이터 정보 추출 / Set<K> / keySet() / Map 데이터들 중 key들만 뽑아서 Set 객체로 리턴
데이터 정보 추출 / Set<Entry<K, V>> / entrySet() / Map의 각 Entry들을 Set 객체로 담아 리턴
데이터 정보 추출 / int / size() / Map에 포함된 데이터(Entry)의 개수
데이터 삭제 / V / remove(Object key) / 입력 매개 변수의 key를 갖는 엔트리 삭제 (단, 해당 key가 없으면 아무런 동작 안함)
데이터 삭제 / boolean / remove(Object key, Object value) / 입력 매개 변수의 key, value를 갖는 엔트리 삭제 (단, 해당 엔트리가 없으면 아무런 동작 안함)
데이터 삭제 / void / clear() / Map 객체 내의 모든 데이터 삭제

[HashMap<K, V>]
Map<K, V> 인터페이스를 구현한 대표적인 구현 클래스
Key, Value의 쌍으로 데이터를 관리하며 저장 공간(capacity)을 동적 관리 (디폴트 값은 16이며 원소가 16을 넘는 경우 자동으로 저장 공간 확대)
입력의 순서와 출력의 순서는 동일하지 않을 수 있음 (Key 값이 Set으로 관리)

중복 확인 메커니즘 이해를 위한 사전 지식
hashCode()의 개념 + 등가 연산(==)과 equals() 메서드의 차이점
hashCode(), equals() → Object 클래스의 메서드 → 모든 클래스 내에 포함

해쉬코드는 객체를 기반으로 생성된 고유값 (실제 번지와는 다름) // 패키지명.클래스명@해쉬코드
Object의 equals()는 ==와 동일한 연산 (저장 번지 비교)

HashMap<K, V>에서의 중복 확인 메커니즘
STEP 1 : hashCode() 동일한지 확인
STPE 2 : equals() 결과가 true인지 확인
동일 객체의 정의를 위해서는 hashCode()와 equals() 메서드 overriding 필요

[Hashtable<K, V>]
HashMap<K, V>이 단일 쓰레드에 적합한 반면 Hashtable은 쓰레드 안정성을 가짐 (즉, 모든 메서드가 동기화(synchronized) 메서드로 구현되어 멀티쓰레드에 적합 (Thread Safe))
입력의 순서와 출력의 순서는 동일하지 않을 수 있음

동기화 되지 않는 HashMap<K, V> / HashSet<E>도 다음과 같이 동기화 Wrapping을 통해 멀티 쓰레드에서 사용 가능
Map<K, V> m = Collections.synchronizedMap(new HashMap<K, V>(...));
Set<E> m = Collections.synchronizedSet(new HashSet<E>(...));

[LinkedHashMap<K, V>]
HashMap<K, V>과 동일한 기능을 수행 (데이터의 추가, 변경, 삭제 등 메서드)
입력 순서 = 출력 순서

[TreeMap<K, V>]
Map<K, V> 인터페이스를 구현한 구현 클래스
엔트리(Key, Value) 집합의 형태로 관리하며 저장 공간(capacity)을 동적 관리
입력 순서와 관계없이 key 값의 크기순으로 출력 (key 값은 대소비교가 가능해야 함)

TreeMap<K, V> = Map<K, V>의 기본 기능 + 정렬/검색 기능추가

Map<K, V>으로 객체 타입을 선언하는 경우 추가된 정렬/검색 기능 사용 불가
Map<Integer, String> treeMap = new TreeMap<Integer, String>();
treeMap._ // Map<K, V> 메서드만 사용가능

추가된 정렬 기능을 사용하기 위해선 TreeMap<K, V> 객체 타입 선언
TreeMap<Integer, String> treeMap = new TreeMap<Integer, String>();
treeMap._ // Map<K, V> 메서드 + 추가된 정렬/검색 기능 메서드

Map (interface)
↑
SortedMap (interface)
↑
NavigableMap (interface)
↑
TreeMap (class)

[Map<K, V> 기본 메서드 이외에 TreeMap<K, V>에서 추가로 사용할 수 있는 정렬/검색 메서드]
구분 / 리턴 타입 / 메서드명 / 기능
데이터 검색 / K / firstKey() / Map 원소들 중 가장 작은(lowest) key 값 리턴
데이터 검색 / Map.Entry<K, V> / firstEntry() / Map 원소들 중 가장 작은(lowest) key 값을 가진 Entry 리턴
데이터 검색 / K / lastKey() / Map 원소들 중 가장 큰(highest) key 값 리턴
데이터 검색 / Map.Entry<K, V> / lastEntry() / Map 원소들 중 가장 큰(highest) key 값을 가진 Entry 리턴
데이터 검색 / K / lowerKey(K key) / 매개 변수로 입력된 key 값보다 작은 key 들 중 가장 가장 큰 key 값
데이터 검색 / Map.Entry<K, V> / lowerEntry<K, V> / 매개 변수로 입력된 key 값보다 작은 key 들 중 가장 큰 key 값을 가지는 Entry 리턴
데이터 검색 / K / higherKey(K key) / 매개 변수로 입력된 key 값보다 큰 key 들 중 가장 작은 key 값
데이터 검색 / Map.Entry<K, V> / higherEntry(K key) / 매개 변수로 입력된 key 값보다 큰 key 들 중 가장 작은 key 값을 가지는 Entry 리턴
데이터 꺼내기 / Map.Entry<K, V> / pollFirstEntry() / Map 원소들 중 가장 작은(lowest) key 값을 가지는 Entry를 꺼내어 리턴
데이터 꺼내기 / Map.Entry<K, V> / pollLastEntry() / Map 원소들 중 가장 큰(highest) key 값을 가지는 Entry를 꺼내어 리턴
데이터 부분 집합(SubSet) 생성 / SortedMap<K, V> / headMap(K toKey) / toKey보다 작은 key 값을 가지는 모든 Entry를 포함한 Map 리턴 (디폴트 : 매개 변수값 미포함)
데이터 부분 집합(SubSet) 생성 / NavigableMap<K, V> / headMap(K toKey, boolean inclusive) / toKey보다 작은 key 값을 가지는 모든 Entry를 포함한 Map 리턴. Inclusive 값에 따라 toKey 값의 포함 여부 결정 (inclusive = true이면 toKey 포함, inclusive = false이면 toKey 미포함)
데이터 부분 집합(SubSet) 생성 / SortedMap<K, V> / tailMap(K fromKey) / toKey보다 큰 key 값을 가지는 모든 Entry를 포함한 Map 리턴 (디폴트 : 매개 변수값 포함)
데이터 부분 집합(SubSet) 생성 / NavigableMap<K, V> / tailMap(K fromKey, boolean inclusive) / fromKey보다 큰 key 값을 가지는 모든 Entry를 포함한 Map 리턴. inclusive 값에 따라 fromKey 포함 여부 결정 (inclusive = true이면 fromKey 포함, inclusive = false이면 fromKey 미포함)
데이터 부분 집합(SubSet) 생성 / SortedMap<K, V> / subSet(K fromKey, K toKey) / fromKey 매개 변수보다 같거나 크고 toKey보다 작은 key 값을 가지는 모든 Entry를 포함한 Map 리턴 (디폴트 : fromElement 포함, toElement 미포함)
데이터 부분 집합(SubSet) 생성 / NavigableMap<K, V> / subSet(K fromKey, boolean frominclusive, K toKey, boolean toinclusive) / fromKey 매개 변수보다 같거나 크고 toKey보다 작은 key 값을 가지는 모든 Entry를 포함한 Map 리턴. frominclusive, toinclusive 값에 따라 fromKey, toKey의 포함 여부 결정 (디폴트 : fromElement 포함, toElement 미포함)
데이터 정렬 / NavigableSet<K> / descendingKeySet() / Map에 포함된 모든 Key 값의 정렬을 반대로 변환한 Set 객체 리턴
데이터 정렬 / NavigableMap<K, V> / descendingMap() / Map에 포함된 모든 Key 값의 정렬을 반대로 변환한 Map 객체 리턴

[TreeMap<K, V>에서 크기 비교]
크다/작다의 기준을 제공해주어야 함
방법 1 : java.lang.Comparable<T> interface 구현
int compareTo(T t) 추상 메서드 포함 (함수적 인터페이스)
매개 변수 t보다 작은 경우 : -1
매개 변수 t와 같은 경우 : 0
매개 변수 t보다 큰 경우 : 1

방법 2 : TreeMap 생성자 매개 변수로 java.util.Comparator<T> interface 객체 제공
int compare(T t1, T t2) 추상 메서드 포함
t1 < t2 인 경우 : -1
t1 = t2 인 경우 : 0
t1 > t2 인 경우 : 1

[Map<K, V> Summary]
HashMap<K, V> : hashCode(), equals()를 통해 중복 체크. 입력 순서와 출력 순서 다름
Hashtable<K, V> : HashMap<K, V>에 동기화 기능 추가 (멀티 쓰레드 안전). 입력 순서와 출력 순서 다름
LinkedHashMap<K, V> : HashMap<K, V>의 기본 기능. 입력 순서와 출력 순서 같음
TreeMap<K, V> : Map<K, V>의 기본 기능 + 정렬/검색 기능 추가. 출력 순서 (오름차순)

[Stack<E> 컬렉션 클래스]
Stack<E> 컬렉션의 특징 :
Vector<E> 클래스의 자식 클래스
List<E>의 기본 메서드의 사용과 더불어 LIFO(Last in First Out) 구조
Vector<E> 클래스의 기본 메서드와 더불어 LIFO 구조를 위한 5개의 메서드 추가 정의 (이들 메서드를 호출하기 위해서는 Stack<E> 타입으로 선언해야 함)

List<E>
↑
Vector<E>
↑
Stack<E>

Stack<E> = Vector<E>의 기본 기능 + LIFO 기능 추가 (5개 메서드)

[Stack<E> 컬렉션의 주요 메서드]
구분 / 리턴 타입 / 메서드명 / 기능
데이터 추가 / E / push(E item) / 매개 변수의 item을 Stack에 추가
데이터 보기 / E / peek() / 가장 상위에 있는 원솟값 리턴 (데이터는 변화가 없음)
데이터 위치 검색 / int / search(Object o) / Stack 원소들의 위칫값을 리턴 (최상위의 위치 1을 기준으로 아래로 내려갈수록 1씩 증가)
데이터 꺼내기 / E / pop() / 최상위 데이터 꺼내기 (데이터 개수 줄어듬)
empty 검사 / boolean / empty() / Stack 객체가 비워져 있는지 여부를 리턴

[Queue<E> 컬렉션 인터페이스]
Queue<E> 컬렉션의 특징 :
Stack<E>과는 달리 별도의 interface로 구성
먼저 들어간 데이터가 먼저 나오는 FIFO(First in First Out) 구조
LinkedList<E> 클래스는 List<E>와 Queue<E> interface를 구현

Collection<E>
↑
Queue<E>
↑
LinkedList<E>

예외 처리 기능 미포함 메서드 → 데이터가 없는 경우 예외 발생
예외 처리 기능 포함 메서드 → 데이터가 없는 경우 기본값 출력

[Queue<E> 컬렉션의 주요 메서드]
구분 / 리턴 타입 / 메서드명 / 기능
예외 처리 기능 미포함 메서드 / 데이터 추가 / boolean / add(E item) / 매개 변수의 item을 Queue에 추가
예외 처리 기능 미포함 메서드 / 데이터 보기 / E / element() / 가장 상위에 있는 원솟값 리턴 (데이터는 변화가 없음) (데이터가 하나도 없는 경우 NoSuchElementException 발생)
예외 처리 기능 미포함 메서드 / 데이터 꺼내기 / E / remove() / 가장 상위에 있는 원솟값 꺼내기 (꺼낼 데이터 없는 경우NoSuchElementException 발생)
예외 처리 기능 포함 메서드 / 데이터 추가 / boolean / offer(E item) / 매개 변수의 item을 Queue에 추가
예외 처리 기능 포함 메서드 / 데이터 보기 / E / peek() / 가장 상위에 있는 원솟값 리턴 (데이터는 변화가 없음) (데이터가 하나도 없는 경우 null을 리턴)
예외 처리 기능 포함 메서드 / 데이터 꺼내기 / E / poll() / 가장 상위에 있는 원솟값 꺼내기 (꺼낼 데이터 없는 경우 null 발생)