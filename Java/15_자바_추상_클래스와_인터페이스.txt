[추상 클래스(abstract class)]
추상 메서드(abstract method)를 하나 이상 포함하고 있는 클래스는 반드시 추상 클래스(abstract class)로 정의되어야 함

추상 클래스 :
abstract class 클래스명 {
}

추상 클래스의 특징 :
추상 클래스는 내부의 미완성 메서드 때문에 객체를 직접 생성할 수 없음 (Heap 메모리에 생성되는 객체는 내부 요소가 미완성된 상태로 들어갈 수 없기 때문. Heap 메모리에는 값이 비어 있는 필드가 저장될 수 없으므로 초기화하지 않은 필드를 Heap 메모리에 저장하려고 하면 강제로 값을 초기화 함)
// 추상 클래스는 붕어빵 기계 부품. 붕어빵 기계 부품으로 붕어빵을 찍을 수는 없지만, 붕어빵 기계는 붕어빵 기계 부품으로 만들 수 있으며, 최종적으로 만들어진 붕어빵 기계로 붕어빵을 찍을 수 있음 (추상 클래스로는 직접 객체를 생성할 수 없지만 이 추상 클래스를 상속한 자식 클래스를 생성하면 그 자식 클래스로는 객체를 생성할 수 있는 것. 그리고 생성된 객체 내부에는 부모 클래스의 추상 메서드가 구현되어 있을 것)

class Animal {
void cry() {
}
}
// 메서드 자체는 아무런 기능을 수행하지 않음. 이 메서드의 존재 목적은 부모 타입으로 cry() 호출을 위해. 기능이 없으니 메서드의 이름만 정의. Animal 클래스 내의 cry() 메서드가 아무런 기능을 수행하지 않는다면(중괄호 안을 비워둘 것이라면) 중괄호 자체가 없는 미완성 메서드인 추상 메서드로 정의하는 것이 효율적. 주의해야 할 점은 추상 메서드를 1개 이상 포함하고 있는 클래스는 반드시 추상 클래스로 정의해야 한다는 것 (Animal 클래스는 반드시 추상 클래스여야 함)

추상 클래스로 대체
abstract class Animal {
abstract void cry(); // 메서드의 본체({})가 없고 세미콜론(;)으로 끝남
}

추상 메서드를 하나도 포함하지 않아도 추상 클래스로 정의는 가능함. 다만 추상 메서드가 없는 경우 추상 메서드로 정의할 이유가 없음

오버라이딩(Overriding) vs. 구현하기(implements)
오버라이딩(Overriding) : 부모 클래스의 메서드(완성/미완성)를 자식 클래스에서 재정의 (완성)
구현하기(implements) : 부모 클래스의 미완성 메서드(추상 메서드)를 자식 클래스에서 재정의 (완성)

추상 클래스 타입의 객체 생성 방법 (자체로는 객체 생성 불가) :
방법 1 : 추상 클래스를 일반 클래스로 상속해 객체 생성 (객체를 여러개 만들 때 유리)
abstract class A {
abstract void abc(); // A a = new A(); (X)
}

class B extends A {
void abc() {
} // A a = new B(); (O) B b = new B(); (O)
}
// 중괄호 안에 아무런 코드가 없어도 완성된 메서드 (아무 일도 하지 말라고 명확히 기능이 표현되 메서드)

방법 2 : 익명 이너 클래스(클래스 이름을 알 수 없음) 사용. 익명 이너 클래스를 사용하면 컴파일러가 내부적으로 클래스를 생성한 후 메서드 오버라이딩 수행 (객체를 하나 만들 때 유리)

익명 이너 클래스 :
클래스명 참조 변수명 = new 생성자() {
// 추상 클래스에 포함된 추상 메서드 오버라이딩
};

A a = new A() {
void abc() {
} // 추상 메서드(미완성 메서드)의 오버라이딩 (완성)
};
// 미완성 메서드를 이 메서드로 완성하여 A의 객체를 생성

[인터페이스(interface)]
내부의 모든 필드가 public static final로 정의되고, static과 default 메서드 이외의 모든 메서드가 public abstract로 정의된 객체 지향 프로그래밍 요소 (디폴트 메서드는 public로 정의)
자체적으로 객체 생성 불가

인터페이스의 구조 :
interface 인터페이스명 {
public static final 자료형 필드명 = 값;
public abstract 리턴 타입 메서드명();
}

interface A {
public static final int a = 3; // 생략시 자동으로 추가 (public static final)
public abstract void abc(); // 생략시 자동으로 추가 (public abstract)
}
// 인터페이스 내에서 필드와 메서드에 사용할 수 있는 제어자(modifier)가 확정되어 있으므로 필드와 메서드 앞에 제어자를 생략해도 다음과 같이 컴파일러가 자동으로 각각의 제어자를 삽입

인터페이스의 상속 :
상속시 implements 사용
다중 상속 가능 (클래스(일반 클래스/추상 클래스)는 다중 상속 불가)

클래스가 인터페이스를 상속하는 구조 :
클래스명 implements 인터페이스명, ..., 인터페이스명 {
}

클래스와 인터페이스를 동시에 상속하는 구조 :
클래스명 extends 클래스명 implements 인터페이스명, ..., 인터페이스명 {
}

class A {
}
interface B {
}
interface C {
}
class D extends A implements B, C { // 순서 변경 불가
}

동일한 타입(클래스/인터페이스) 상속시 extends
다른 타입을 상속하는 경우 implements

클래스 extends 클래스 {
}
클래스 implements 인터페이스 {
}
인터페이스 extends 인터페이스 {
}
(X) 인터페이스 implements 클래스 { // 인터페이스는 클래스를 상속할 수 없음
}

interface A {
abstract abc();
}

class B implements A {
}
// 오류 발생
클래스 B는 일반 클래스 (내부에 완성된 메서드만 존재 가능)
인터페이스 상속 (내부에 미완성 메서드도 클래스 B로 상속됨)
내부에 완성 메서드만 존재하기 위해서 미완성 메서드를 완성하여야 함 (구현 : 미완성 → 완성)

메서드의 완성과 미완성의 구분 기준 : 중괄호({})의 존재 여부

상속시 접근 지정자는 좁아질 수 없음
interface A {
void abc(); // 컴파일러가 자동으로 public abstract 제어자 추가
}

class B implements A {
void abc() {
} // default 접근 지정자를 가지는 메서드로 오버라이딩. 접근 범위가 좁아져 오류 발생
}

인터페이스 타입의 객체 생성 방법 (자체로는 객체 생성 불가) :
방법 1 : 인터페이스를 일반 클래스로 상속하여 객체 생성 (객체를 여러개 만들 때 유리)
interface A {
int a = 3;

void abc();
} // A a = new A(); (X)

class B implements A {
public void abc() {
}
} // A a = new B(); (O) B b = new B(); (O)

방법 2 : 익명 이너 클래스 사용 (인터페이스의 객체 생성 방법은 추상 클래스(abstract class) 객체 생성 방법과 동일) (객체를 하나 만들 때 유리)
A a = new A() {
public void abc() {
} // 미완성 메서드를 완성한 후 A 객체 생성
};

[디폴트 메서드(default method)]
인터페이스 내부에 완성된 메서드
// 과거에 사용하던 인터페이스 안에 새로운 기능을 추가 하고자 할 때 인터페이스를 implements한 경우 미완성 메서드를 모두 구현해야하는 번거로움 때문에 디폴트 메서드(완성된 메서드)가 탄생

디폴트 메서드 :
interface 인터페이스명 {
public default 리턴 타입 메서드명 {}
} // 접근 지정자는 자동으로 public 추가됨. 오버라이딩도 가능 (완성된 메서드이기 때문에 구현 클래스가 반드시 오버라이딩 할 필요는 없음)

자식 클래스에서 부모 인터페이스의 디폴트 메서드 호출 방법 :
부모 인터페이스명.super.디폴트 메서드명 (그냥 super.메서드명()을 사용하는 경우 상위 클래스인 Object 클래스 내부에서 메서드를 찾음)

모든 자바의 클래스는 Object 클래스를 상속. 만일 아무런 클래스도 상속하지 않으면 컴파일러는 자동으로 Object 클래스를 상속하는 구문을 추가
class C implements A, B {
}
=
class C extends Object implements A, B {
}
// 부모가 셋(Object, A, B)인 클래스 C의 호출 방법 :
클래스는 super.부모 메서드명 (클래스는 다중 상속을 할 수 없으므로 부모 클래스를 구분 지을 필요 없음)
인터페이스는 부모 인터페이스명.super.부모 메서드명 (인터페이스는 다중 상속이 되므로 어떤 부모 인터페이스 내부의 메서드를 호출하라는 소리인지 구분할 필요가 있음)

자바 8 이후부터 추가된 인터페이스의 두 번째 기능은 static 메서드를 포함할 수 있다는 것. 클래스 내부의 정적 메서드와 사용 방법 동일 (객체 생성 없이 클래스 이름으로 바로 접근 가능)

인터페이스 내의 정적(static) 메서드 호출 :
인터페이스명.정적 메서드명

interface A {
static void abc() {
}
}

A.abc(); // 객체를 생성하지 않고 바로 사용 가능

[sealed interface(봉인된 인터페이스)]
Java 15부터는 무분별한 자식 인터페이스 생성을 방지하기 위해 봉인된(sealed) 인터페이스를 사용할 수 있음. interfaceA의 자식 인터페이스는 interfaceB만 가능하고, 그 이외는 자식 인터페이스가 될 수 없도록 다음과 같이 interfaceA를 봉인된 인터페이스로 선언할 수 있음
public sealed interface InterfaceA permits InterfaceB {}
sealed 키워드를 사용하면 permits 키워드 뒤에 상속 가능한 자식 인터페이스를 지정해야 함. 봉인된 interfaceA를 상속하는 interfaceB는 non-sealed 키워드로 다음과 같이 선언하거나 sealed키워드를 사용해서 또 다른 봉인 인터페이스로 선언해야 함
public non-sealed interface InterfaceB extends InterfaceA {}
non-sealed는 봉인을 해제한다는 뜻. 따라서 interfaceB는 다른 자식 인터페이스를 만들 수 있음
public interface InterfaceC extends interfaceB {}