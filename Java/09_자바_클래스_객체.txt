[클래스(class)]
절차지향형 프로그래밍(PP : Procedural Programming) : 순서에 맞추어 단계적으로 실행하도록 명령어를 나열
객체지향형 프로그래밍(OOP : Object-Oriented Programming) : 객체를 구성하고 객체 단위로 프로그래밍 (필드/메서드)

클래스 : (일반)클래스 / 추상 클래스(추상(abstract) 메서드를 하나 이상 가지고 있는 클래스)
인터페이스(interface) : 모든 필드는 public static final, 모든 메서드는 public abstract

추상 메서드(abstract method) : 함수의 정의가 미완성된 메서드

클래스의 정의 :
class 클래스명 {
}

클래스 외부 구성 요소 3가지
1. 패키지(package) : .java 파일의 폴더(패키지) 위치. default의 경우 폴더가 생성되지 않음
2. 임포트(import) : 다른 폴더(패키지) 위치의 클래스를 참조
3. 외부 클래스(external class) : 외부에 포함된 또 다른 클래스. public 키워드를 사용할 수 없음

클래스 내부 구성 요소 4가지
1. 필드(field 멤버) : 클래스 특징(속성)을 나타내는 변수 (int age = 20)
2. 메서드(method 멤버) : 클래스의 기능 (void working(){}) 리턴 타입 + 메서드명 + () + {}로 구성
3. 생성자(constructor) : 객체 생성 기능 (생성자명 + () + {}) 생성자명은 클래스명과 동일하여야 함
4. 이너 클래스(inner class 멤버) : 클래스 내부 정의된 클래스

클래스와 객체 구분
클래스(Class)는 타입의 구조(붕어빵 기계)를 나타내며, 객체(Object)는 해당 타입으로 생성된 실체(붕어빵)를 나타냄. 클래스에서 객체를 만드는 과정은 생성자가 수행. 클래스의 생성자로 객체를 만드는 과정을 인스턴스화(instantiation)라고 하고, 인스턴스화로 만들어진 객체를 인스턴스(instance)라고 함. 객체 속에는 클래스의 내부 구성 요소 중 생성자를 제외한 나머지 요소가 포함되어 있는데 이를 인스턴스 멤버(instance member)라고 함. 이 시점에서 클래스는 바로 사용할 수 없고 반드시 객체를 생성해 객체 안에 있는 필드, 메서드, 이너 클래스를 사용해야 함

객체(object) = 클래스(class)의 인스턴스(instance)

클래스의 객체 생성 :
클래스명 참조 변수명 = new 생성자();

A(클래스명) a(참조 변수명) = new(Heap 메모리에 넣어라) A(생성자)(); // (출력값) 객체(필드, 메서드, 이너 클래스)

모든 생성 객체는 동일한 메서드(기능)를 가짐 (즉, 객체를 구분하는 것은 속성) 따라서 모든 객체는 메서드를 공유

객체의 활용(외부 호출) : 참조 변수명.필드명 / 참조 변수명.메서드명()

자바에서는 힙 메모리에 직접 접근할 수 있는 방법이 없으며, 위치 정보를 포함하고 있는 참조 변수를 이용해서만 객체에 접근할 수 있음. 이때 사용하는 것이 포인트 연산자(.) 포인트 연산자의 의미는 해당 위치에 있는 객체 안을 보라는 뜻