변수, 상수, 메서드 이름 선정
(필수 사항)
영문 대소문자 및 한글 사용 가능. 특수문자는 _, $만 가능(영문자와 동급). 숫자는 첫번째에 올 수 없음. 자바에서 사용중인 키워드 사용 불가
(권고 사항)
변수, 메서드 : 소문자로 시작. 두개 이상의 단어가 결합된 경우 새 단어는 대문자로 시작 (CamelCase)
상수(final) : 모든 문자는 대문자. 두개 이상의 단어는 _로 연결

메서드 이름과 변수 이름은 동일해도 무관. 메서드 호출 방법과 변수를 사용하는 방법이 다르기 때문 (main 키워드 사용 가능)

변수의 생존기간 : 자신이 선언된 열린 중괄호({)의 쌍이 되는 닫힌 중괄호(}) 안에서만 사용 가능

기본 자료형(8개) : boolean(1 byte) / byte(1 byte), short(2 byte), int(4 byte), long(8 byte) / float(4 byte), double(8 byte) / char(2 byte) (기본자료형 이름은 소문자로 시작) // stack 메모리에 저장

n bit로 표현할 수 있는 정수의 개수 = 2의 n승 가지수 (1 byte = 8 bit)

자료 처리의 최소 단위 : byte

리터럴(literal) 타입 : 자료형 없이 값으로 입력하는 경우 값의 형태에 따라 대표 자료형으로 자동 변환됨. 정수값 → int, 실수값 → double
// 예외 : int보다 작은 자료형인 byte/short에 대입되는 int값은 각각 byte와 short로 인식됨 (해당 타입이 저장할 수 있는 범위 내 값인 경우)

실수가 같은 크기로 넓은 범위를 저장할 수 있는 이유는 지수와 가수로 표현하기 때문

실수의 정밀도 : float은 소수점 대략 7자리 정도의 정밀도 / double은 소수점 대략 15자리 정도의 정밀도

타입 변환(Type Casting) : 숫자를 저장하는 7개(boolean 제외)의 기본 자료형 사이에 타입 변환. 자동 타입 변환(업 캐스팅) : 값의 표현 범위가 작은 쪽에서 큰(넓은) 쪽으로 저장되는 경우 컴파일러가 자동으로 타입 변환 수행 / 수동 타입 변환(다운 캐스팅) : 값의 표현 범위가 큰 쪽에서 작은(좁은) 쪽으로 저장되는 경우 직접 표기하지 않으면 오류 발생

CPU는 byte, short 데이터의 로딩 과정에서 int값으로 읽어와 변환하여 저장 (하위 비트) (연산시에도 최소자료형은 int)

기본 자료형간의 연산 : byte + byte = int / shoet + short = int / byte + short = int / short + long = long / int + float = float / long + float = float / float + double = double

자료형의 크기 비교는 값의 범위로 함. byte가 아님 (byte < short/char < int < long < float < double)

문자(char)를 저장하기 위해서는 작은따옴표('') 사용. 유니코드 값을 그대로 입력 가능('\u+16진수코드'). 정수값(10진수 또는 16진수 등 다양한 진법)의 직접 입력 가능

진수 : 10진수(숫자), 2진수(0b+숫자), 8진수(0+숫자), 16진수(0x+숫자)

유니코드는 진법이 아니기 때문에 작은따옴표('') 사용. 진법은 작은따옴표('') 사용안함

char로 선언된 모든 변수는 문자로 읽어서 화면에 출력

참조 자료형(무한개) : 배열, 열거, 클래스/인터페이스 (이름은 대문자로 시작) // heap 메모리에 저장

메모리의 구조 : class 영역, static 영역, final 영역, 메서드 영역 / Stack 영역 / Heap 영역

[Wrapper(포장) 클래스]
기본 타입 / 포장 클래스
byte / Byte
char / Charactor
short / Short
int / Integer
long / Long
float / Float
double / Double
boolean / Boolean

Boxing
기본 타입의 값을 포장 객체로 만드는 과정
Unboxing
포장 객체에서 기본 타입의 값을 얻어내는 과정

기본 타입의 값을 줄 경우
Byte obj = New Byte(10);
Charactor obj = new Charactor('가');
Short obj = new Short(100);
Integer obj = new Integer(1000);
Long obj = new Long(10000);
Float obj = new Float(2.5F);
Double obj = new Double(3.5);
Boolean obj = new Boolean(true);

문자열을 줄 경우
Byte obj = New Byte("10");
Charactor 없음
Short obj = new Short("100");
Integer obj = new Integer("1000");
Long obj = new Long("10000");
Float obj = new Float("2.5F");
Double obj = new Double("3.5");
Boolean obj = new Boolean("true");

생성자를 이용하지 않아도 다음과 같이 각 포장 클래스마다 가지고 있는 정적 valueOf() 메서드를 사용할 수 있음

Integer obj = Integer.valueOf(1000);
Integer obj = Integer.valueOf("1000");

박싱된 포장 객체에서 다시 기본 타입의 값을 얻어내기 위해서는(언박싱하기 위해서는) 각 포장 클래스마다 가지고 있는 '기본 타입 이름 + Value()' 메서드를 호출

기본 타입의 값을 이용
byte num = obj.byteValue();
char ch = obj.charValue();
short num = obj.shortValue();
int num = obj.intValue();
long num = obj.longValue();
float num = obj.floatValue();
double num = obj.doubleValue();
boolean bool = obj.booleanValue();

문자열을 기본 타입 값으로 변환
기본 타입의 값을 이용
byte num = Byte.parseByte("10");
short num = Short.parseShort("100");
int num = Integer.parseInt("1000");
long num = Long.parseLong("10000");
float num = Float.parseFloat("2.5F");
double num = Double.parseDouble("3.5");
boolean bool = Boolean.parseBoolean("true");

포장 객체는 내부의 값을 비교하기 위해 ==와 != 연산자를 사용하지 않는 것이 좋음. 이 연산자는 내부의 값을 비교하는 것이 아니라 포장 객체의 참조를 비교하기 때문

타입 / 값의 범위
boolean / true, false
char / \u0000 ~ \u007f
byte, short, int / -128 ~ 127
// 자바 언어 명세를 보면 이 범위의 값이라면 ==와 != 연산자로 내부의 값을 바로 비교할 수 있지만, 그 이외의 경우에는 언박싱한 값을 얻어 비교해야 함. 따라서 포장 객체에 정확히 어떤 값이 저장될지 모르는 상황이라면 ==와 != 연산자는 사용하지 않는 것이 좋음. 직접 내부 값을 언박싱해서 비교하거나 equals() 메서드로 내부 값을 비교하는 것이 좋음. 포장 클래스의 equals() 메서드는 내부의 값을 비교하도록 재정의되어 있음