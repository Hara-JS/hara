자바에서 8개의 기본 자료형 이외의 모든 자료형은 참조 자료형. 대표적인 참조 자료형에는 배열(array), 클래스(class), 인터페이스(interface) 등이 있음. 참조 자료형은 개발자가 얼마든지 정의할 수 있으므로 무한개라 할 수 있음

[배열(array)]
배열은 동일한 자료형을 묶어 저장하는 참조 자료형

배열의 두 가지 특징 :
1. 동일한 자료형만 묶어서 저장 가능
2. 생성시 크기를 지정 (이후 크기 변경 불가)

배열의 선언 : 자료형[] 변수명 / 자료형 변수명[] (변수형 앞에 자료형을 두는 것이 일관성이 있음)

배열의 객체 생성 : new 자료형[배열의 길이] // 여러 개의 값을 저장할 수 있는 공간. Heap 메모리에 생성

int[] a = new int[3]의 뜻 : int 자료형 3개를 저장할 수 있는 공간을 Heap 메모리에 넣어두고 어디에 넣었는지를 참조 변수 a에 저장해라

배열의 값 대입 : 참조 변수명[인덱스번호] = 값;

배열의 값 읽기 : 참조 변수명[인덱스번호];

배열의 생성 및 값 대입 :
방법 1 (배열 객체를 생성하고 값 대입하기)
자료형[] 참조 변수명 = new 자료형[배열의 길이];
참조 변수명[0] = 값;
참조 변수명[1] = 값;
...;
참조 변수명[배열의 길이-1] = 값;

방법 2 (배열 객체 생성과 함께 값 대입하기)
자료형[] 참조 변수명 = new 자료형[] {값, 값, ..., 값}; (이 경우 배열의 길이는 쓰지 않음. 배열의 길이는 값의 개수로 결정. 선언과 값의 대입 분리 가능)

방법 3 (대입할 값만 입력하기)
자료형[] 참조 변수명 = {값, 값, ..., 값}; (선언과 값의 대입 분리 불가능)

배열의 길이 가져오기 : 배열의 길이 = 배열 참조 변수명.length

for-each문 : for-each문은 배열이나 컬렉션(collection)등의 집합 객체에서 원소들을 하나씩 꺼내는 과정을 반복하는 구문으로 집합 객체의 원소들을 출력할 때 사용

for(원소 자료 변수명 : 집합 객체) {
} // 배열 또는 컬렉션과 같이 다수의 원소를 가지고 있는 객체에서 원소를 하나씩 차례로 꺼내는 기능을 반복적으로 수행

Arrays.toSting(1차원 배열 참조 변수) → 배열값 출력 정적 메서드

int[] a; // int를 저장할 수 있는 1차원 배열
int[][] a; // int[]을 저장할 수 있는 1차원 배열

2차원(정방 행렬) 배열 : 가로 및 세로 방향으로 정렬된 배열 (선언시 배열의 동일한 자료형 저장 특징이 나타나야 함)

2차원(다차원) 배열의 선언 : 자료형[][] 변수명 / 자료형 변수명[][] / 자료형[] 변수명[] (변수형 앞에 자료형을 두는 것이 일관성이 있음)

배열의 위치 표현은 세로 방향으로 숫자가 늘어나는 행(row) 번호와 가로 방향으로 숫자가 늘어나는 열(column) 번호로 구성되어 있으며 각 방향의 인덱스는 0부터 시작

2차원(정방행렬) 배열의 객체 생성 :
방법 1 (배열 객체의 생성 + 값 대입)
자료형[][] 참조 변수명 = new 자료형[행의 길이][열의 길이];
참조 변수명[0][0] = 값;
참조 변수명[0][1] = 값;
...;
참조 변수명[행의 길이-1][열의 길이-1] = 값;

int[][] a = new int[2][3];
a[0][0] = 1;
a[0][1] = 2;
a[0][2] = 3;
a[1][0] = 4;
a[1][1] = 5;
a[1][2] = 6;

메모리는 데이터를 1차원으로만 저장 가능. 2차원 데이터를 저장하기 위해서는 1차원(행의 단위)으로 나누어 저장 (1차원 배열을 원소로 가지는 1차원 배열)

방법 2(2차원 배열 객체의 행 성분(1차원 배열)만 생성. 각 행에 열 성분(1차원 배열) 생성) (참조변수 a가 가리키는 배열은 몇 행인지만 정해지면 배열 선언이 가능하기 때문에 행의 정보만 있으면 배열 생성 가능)
자료형[][] 참조 변수명 = new 자료형[행의 길이][]; // 열의 길이는 표시하지 않음
참조 변수명[0] = 1차원 배열의 생성;
참조 변수명[1] = 1차원 배열의 생성;
...
참조 변수명[행의 길이 -1] = 1차원 배열의 생성;

int[][] a = new int[2][];
a[0] = new int[3];
a[0][0]=1; a[0][1]=2; a[0][2]=3;
a[1] = new int[3];
a[1][0]=4; a[1][1]=5; a[1][2]=6;

int[][] a = new int[2][];
a[0] = new int[] {1, 2, 3};
a[1] = new int[] {4, 5, 6};

방법 3 (값 대입 : 자료형과 대입할 값만 입력)
자료형[][] 참조 변수명 = new 자료형[] {{값, 값, ..., 값}, ..., {값, 값, ..., 값}}; (이 경우 배열의 길이는 쓰지 않음)

int[][] a = new int[][] {{1, 2, 3}, {4, 5, 6}};

방법 4 (값 대입 : 대입할 값만 입력)
자료형[][] 참조변수명 = {{값, 값, ..., 값}, ..., {값, 값, ..., 값}};

int[][] a = {{1, 2, 3}, {4, 5, 6}}; (값만 대입하는 방법 4의 경우 1차원 배열과 마찬가지로 선언과 동시에 값을 대입하는 경우만 가능)

2차원(비정방행렬) 배열 : 행마다 열의 개수가 서로 다른 2차원 행렬

방법 1 (2차원 배열 객체의 행 성분(1차원 배열)만 생성. 각 행에 열 성분(1차원 배열) 생성)
지료형[][] 참조 변수명 = new 자료형[행의 길이][]; // 열의 길이는 표시하지 않음
참조 변수명[0] = 1차원 배열의 생성;
참조 변수명[1] = 1차원 배열의 생성;
...
참조 변수명[행의 길이-1] = 1차원 배열의 생성;

int[][] a = new int[2][];
a[0] = new int[2];
a[0][0]=1; a[0][1]=2;
a[1] = new int[3];
a[1][0]=3; a[1][1]=4; a[1][2]=5;

int[][] a = new int[2][];
a[0] = new int[] {1, 2};
a[1] = new int[] {3, 4, 5};

방법 2 (값 대입 : 자료형과 대입할 값만 입력)
자료형[][] 참조 변수명 = new 자료형[][] {{값, 값, ..., 값}, ..., {값, 값, ..., 값}};

int[][] a = new int[][] {{1, 2}, {4, 5, 6}};

방법 3 (값 대입 : 대입할 값만 입력)
자료형[][] 참조 변수명 = {{값, 값, ..., 값}, ..., {값, 값, ..., 값}};

int[][] a = {{1, 2}, {4, 5, 6}}; (2차원 정방 행렬 때와 마찬가지로 방법 3은 배열의 선언과 객체 대입을 분리할 수 없음)

2차원 배열의 출력
이중 for문을 이용한 2차원 배열 데이터 읽기
int[][] a = {{1, 2}, {4, 5, 6}};
for(int i = 0; i < a.length; i++) {
for(int j = 0; j < a[i].length; j++) {
System.out.println(a[i][j]);
}
}

for-each 반복문을 이용한 배열 데이터 읽기 (2차원 배열의 원소는 1차원 배열이기 때문에 2차원 배열의 for-each를 통해 추출된 원소는 1차원 배열값임)
int[][] a = {{1, 2}, {4, 5, 6}};
for(int[] m : a) {
for{int n : m) {
System.out.println(n);
}
}

배열 복사
System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length);
src 매개값은 원본 배열
srcPos는 원본 배열에서 복사할 항목의 시작 인덱스
dest 매개값은 새 배열
destPos는 새 배열에서 붙여넣을 시작 인덱스
length는 복사할 개수
예를 들어 원본 배열이 arr1이고 새 배열이 arr2일 경우 arr1의 모든 항목을 arr2로 복사하려면 다음과 같이 System.arraycopy() 메서드를 호출
System.arraycopy(arr1, 0, arr2, 0, arr1.length);
// System.arraycopy(원본 배열, 원본 배열 복사 시작 인덱스, 새 배열, 새 배열 붙여넣기 시작 인덱스, 복사 항목수);

[main() 메서드의 입력매개변수]
main() 메서드가 처음 실행될 때 main() 메서드로 매개변수 전달 가능

public static void main(String[] args) {
}

[Run] → [Run Configurations] → [(x)=Arguments]

Spacebar로 데이터를 구분

[String 클래스]
문자열 저장 클래스 타입. 문자열은 쌍따옴표("")안에 표기

String 클래스의 객체를 생성하는 2가지 방법
방법 1 (new 키워드를 사용한 객체 생성)
String 참조 변수명 = new String("문자열");

String str = new String("안녕");

방법 2 (참조변수에 바로 문자열 리터럴 입력)
String 참조 변수명 = "문자열";
String str = "안녕";

String 클래스만이 가지고 있는 2가지 특징
1. 객체 내의 값 변경 불가능 (값 변경시 새로운 객체를 생성하여 작성)
2. 리터럴을 바로 입력한 데이터는 문자열이 같은 경우 하나의 객체를 공유

String 객체의 '+' 연산 (Plus Operation)
1. 문자열 + 문자열 → 문자열을 연결
2. 문자열 + 기본자료형 또는 기본자료형 + 문자열 → 기본자료형을 문자열로 변환 + 문자열 연결

[String 클래스의 주요 메서드]
구분 :
리턴 타입 / 메서드
/ 설명

문자열 길이 :
int / length()
/ 문자열의 길이

문자열 검색 :
char / charAt(int Index)
/ 인덱스 위치에서의 문자

int / indexOf(int ch)
int / indexOf(int ch, int fromIndex)
int / indexOf(String str)
int / indexOf(String str, int fromIndex)
/ 문자열에 포함된 문자 또는 문자열의 위치를 앞에서부터 검색했을 때 일치하는 인덱스 값 (fromIndex는 검색 시작 위치)

int / lastindexOf(int ch)
int / lastindexOf(int ch, int fromIndex)
int / lastindexOf(String str)
int / lastindexOf(String str, int fromIndex)
/ 문자열에 포함된 문자 또는 문자열의 위치를 뒤에서부터 검색했을 때 일치하는 인덱스 값 (fromIndex는 검색 시작 위치)

문자열 변환 및 연결 :
Static String / String.valueOf(boolean b)
Static String / String.valueOf(char c)
Static String / String.valueOf(int i)
Static String / String.valueOf(long l)
Static String / String.valueOf(float f)
Static String / String.valueOf(double d)
/ boolean, char, int, long, float, double 값을 문자열로 변환하기 위한 정적 메서드

String / concat(String str)
/ 문자열 연결 (String 객체의 '+' 연산과 동일)

문자열 배열 변환 :
byte[] / getBytes()
byte[] / getBytes(Charset charset)
/ 문자열을 byte[]로 변환 (변환할 때 문자 셋(charset) 지정 가능)

char[] / toCharArray()
/ 문자열을 char[]로 변환

문자열 수정 :
String / toLowerCase()
/ 영문 문자를 모두 소문자로 변환

String / toUpperCase()
/ 영문 문자를 모두 대문자로 변환

String / replace(char oldChar, char newChar)
/ oldChar 문자열을 newChar 문자열로 대체한 문자열 생성

String / substring(int beginIndex)
/ beginIndex부터 끝까지의 문자열 생성

String / substring(int beginIndex, int endIndex)
/ beginIndex부터 endIndex-1 위치까지의 문자열 생성

String[] / split(String regex)
String[] / split(String regex, int limit)
/ regex를 기준으로 문자열을 분할한 문자열 배열을 생성 (regex 구분 기호는 '|' 기호로 여러 개 사용 가능. limit은 분할의 최대 개수)

String / trim()
/ 문자열의 앞뒤 공백 제거

문자열 내용 비교 :
boolean / equals()
/ 문자열의 실제 내용 비교 (==는 메모리 번지(stack) 비교)

boolean / equalsIgnoreCase(String anotherString)
/ 대소문자 구분 없이 문자열의 실제 내용 비교

[열거 타입(enumeration type)]
한정된 값인 열거 상수(enumeration constant) 중에서 하나의 상수를 저장하는 타입

열거 타입을 선언하기 위해서는 먼저 열거 타입의 이름을 정하고 해당 이름으로 소스 파일(.java)을 생성해야 함. 열거 타입 이름은 관례적으로 첫 글자만 대문자로 하고 나머지는 소문자로 구성. 만약 여러 단어로 구성된 이름이라면 각 단어의 첫 글자는 대문자로 하는 것이 관례

public enum 열거 타입 이름 {} // 열거 타입 이름은 소스 파일 이름과 대소문자가 모두 일치해야 함

public enum Week {MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY} // 열거 상수는 모두 대문자로 작성

public enum LoginResult {LOGIN_SUCCESS, LOGIN_FAILED} // 열거 상수가 여러 단어로 구성될 경우에는 단어 사이를 밑줄(_)로 연결하는 것이 관례

열거 타입을 이클립스에서 생성하는 법
Package Explorer 뷰에서 [File] - [New] - [Enum] 메뉴를 선택 → [New Enum Type] 대화상자의 [Package] 입력란에는 열거 타입이 속할 패키지 이름을 입력하고, [Name] 입력란에는 열거 타입 이름인 Week를 입력한 후 [Finish] 버튼을 클릭 → 열거 상수 작성

열거 타입 변수;
Week today;

열거 타입 변수 = 열거 타입.열거 상수;
Week today = Week.SUNDAY;
Week birthday = null; // 열거 타입도 참조 타입이기 때문에 null 값을 저장할 수 있음

today == Week.SUNDAY; // true // 서로 같은 Week 객체를 참조함

Week week1 == Week.SATURDAY;
Week week2 == Week.SATURDAY;
System.out.println(week1 == week2); // true

[Calendar 클래스]
Calendar now = Calendar.getInstance(); // import 필요

int year = now.get(Calendar.YEAR); // 연
int month = now.get(Calendar.MONTH) + 1; // 월 (1~12)
int day = now.get(Calendar.DAY_OF_MONTH); // 일
int week = now.get(Calendar.DAY_OF_WEEK); // 요일 (1~7)
int amPm = now.get(Calendar.AM_PM); // 오전/오후
int hour = now.get(Calendar.HOUR); // 시간
int minute = now.get(Calendar.MINUTE); // 분
int second = now.get(Calendar.SECOND); // 초

Calendar 클래스의 오버로딩된 다른 getInstance() 메서드를 이용하면 미국/로스엔젤레스와 같은 다른 시간대의 Calendar를 얻을 수 있음. 알고 싶은 시간대의 TimeZone 객체를 얻어, getInstance() 메서드의 매개값으로 넘겨주면 됨

TimeZone timeZone = TimeZone.getTimeZone("America/Los_Angeles");
Calendar now = Calendar.getInstance(timeZone);

America/Los_Angeles와 같은 시간대 Id는 TimeZone.getAvailableIDs() 메서드가 리턴하는 값 중 하나를 사용하면 됨

String[] availableIDs = TimeZone.getAvailableIDs();
for (String id : availableIDs) {
System.out.println(id);
}

날짜와 시간 조작
java.time 패키지의 LocalDateTime 클래스가 제공하는 다음 메서드를 이용하면 매우 쉽게 날짜와 시간을 조작할 수 있음

메서드(매개 변수) / 설명
minusYears(long) / 년 빼기
minusMonths(long) / 월 빼기
minusWeeks(long) / 주 빼기
minusDays(long) / 일 빼기
plusYears(long) / 년 더하기
plusMonths(long) / 월 더하기
plusWeeks(long) / 주 더하기
plusDays(long) / 일 더하기
minusHours(long) / 시간 빼기
minusMinutes(long) / 분 빼기
minusSeconds(long) / 초 빼기
minusNanos(long) / 나노초 빼기
plusHours(long) / 시간 더하기
plusMinutes(long) / 분 더하기
plusSeconds(long) / 초 더하기

LocalDateTime 클래스를 이용해서 현재 컴퓨터의 날짜와 시간을 얻는 방법
LocalDateTime now = LocalDateTime.now();

DateTimeFormatter는 날짜와 시간을 주어진 문자열 패턴으로 변환할 때 사용
LocalDateTime의 format() 메서드 호출 시 매개값으로 제공하면 문자열 패턴과 동일한 문자열을 얻을 수 있음

LocalDateTime now = LocalDateTime.now();
DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy.MM.dd a HH:mm:ss");
System.out.println("현재 시간 : " + now.format(dtf));

날짜와 시간 비교 :
리턴 타입 / 메서드(매개 변수) / 설명
boolean / isAfter(other) / 이후 날짜인지?
boolean / isBefore(other) / 이전 날짜인지?
boolean / isEqual(other) / 동일 날짜인지?
long / until(other, unit) / 주어진 단위(unit) 차이를 리턴