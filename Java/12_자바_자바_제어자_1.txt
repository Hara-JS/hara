[자바 제어자(modifier)]
클래스, 필드, 메서드, 생성자 등에게 어떠한 특징을 부여하는 문법 요소

멤버(필드, 메서드, 이너 클래스) 및 생성자(내부 구성 요소)의 접근 지정자 :
public, protected, default(package), private
접근 지정자는 멤버 또는 생성자 앞에 위치

접근 범위 :
public > protected > default(package) > private
public : 동일 패키지의 모든 클래스 + 다른 패키지의 모든 클래스에서 사용 가능
protected : 동일 패키지의 모든 클래스 + 다른 패키지의 자식 클래스에서 사용 가능
default(package) : 동일 패키지의 모든 클래스에서 사용 가능 // default(package) 접근 지정자는 멤버 앞에 아무것도 표기하지 않는 것을 말함
private : 동일 클래스에서 사용 가능

클래스의 접근 지정자 :
public, default 접근 지정자만 사용 가능
// default 클래스는 같은 패키지 내에서만 사용 가능. public 클래스는 다른 패키지에서도 사용 가능. 클래스를 default로 정의하면 다른 패키지에서 import 자체가 불가능. 다른 패키지에서 사용하려면 public 클래스 선언 (public 클래스만 다른 패키지에서 import 가능)

클래스의 접근 지정자 vs. 생성자의 접근 지정자
컴파일러가 자동 생성하는 기본 생성자의 접근 지정자는 클래스의 접근 지정자와 동일 (클래스가 public이면 자동으로 추가되는 생성자도 public. 클래스가 default이면 자동으로 추가되는 생성자도 default)

[static 제어자]
static 키워드 (필드) :
static은 클래스의 멤버(필드, 메서드, 이너 클래스)에 사용하는 제어자
객체 생성 없이 바로 사용 가능 (클래스명.멤버명 만으로 바로 사용 가능)
// 앞에 static이 붙어 있는 멤버를 정적 멤버(static member)라고 함

인스턴스 필드와 정적 필드를 1개씩 포함하고 있는 클래스의 예 :
class A {
int m = 3; // 인스턴스 필드는 객체를 생성한 후 사용 가능
static int n = 5; // static 필드는 객체 생성 없이 사용 가능
}

인스턴스 필드의 활용 방법
A a = new A();
System.out.println(a.m); // 객체 생성 후에 사용 가능 (참조 변수명.인스턴스 필드명)

static 필드의 활용 방법
System.out.println(A.n); // 객체 생성 없이 바로 사용 (클래스명.정적 필드명)

A a = new A();
System.out.println(a.n); // 객체 생성 후 사용 (지양할 것)

static 필드의 객체 간 공유 기능 : static 필드는 객체 간 공유 변수의 성질이 있음. 힙 메모리 객체에는 저장 공간이 없음. 저장 공간은 static 영역에 있음

static 키워드 (메서드) :
객체 생성 없이 바로 사용 가능

인스턴스 메서드와 정적 메서드를 1개씩 포함하고 있는 클래스의 예 :
class A {
void abc() { // 인스턴스 메서드는 객체를 생성한 후 사용 가능
System.out.println("instance method");
}
static void bcd() { // static 메서드는 객체 생성 없이 사용 가능
System.out.println("static method");
}
}

인스턴스 메서드의 활용 방법
A a = new A();
a.abc(); // 객체 생성 후에 사용 가능

static 메서드의 활용 방법
A.bcd(); // 객체 생성 없이 바로 사용

A a = new A();
a.bcd(); // 객체 생성 후 사용 (지양할 것)

static 메서드에서 사용 가능한 필드 및 메서드 : static 메서드 내에서는 static 멤버만 사용 가능 (객체 생성 이전에 사용 가능해야 하기 때문)
정적 메서드 내부에서는 클래스 객체 참조 변수인 this 키워드를 사용할 수 없음
→ this 객체를 사용할 수 없으면 객체를 통해서만 접근할 수 있는 인스턴스 멤버를 사용할 수 없음
→ 인스턴스 메서드 내부 : 인스턴스 멤버 + 정적 멤버 모두 사용 가능 / 정적 메서드 내부 : 정적 멤버만 사용 가능

static 초기화 블록 :
static {
// 클래스가 메모리에 로딩될 때 실행되는 내용
}

instance 필드의 초기화 위치 → 생성자 (객체가 만들어지는 시점)
static 필드의 초기화 위치 → static {} (static 초기화 블럭) (생성자 호출없이 초기화 가능)

[JVM에서의 main() 메서드 실행]
main() 함수에 static이 붙은 이유 :
class A {
public static void main(String[] args) {
}
}
// JVM은 실행 클래스명.main()을 호출하는 것만으로 이 메서드를 실행
A.java → (컴파일) → A.class → (실행) → JVM → A.main() 실행
JVM은 프로그램을 실행할 때 실행 클래스명.main()을 실행하므로 가장 먼저 실행되는 메서드인 main() 메서드를 정적 메서드로 구성한 것