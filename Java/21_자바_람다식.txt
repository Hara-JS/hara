[람다식(Lambda Expression)]
자바에서 함수적 프로그래밍 지원 기법
코드의 간결화 및 병렬 처리에 강함 (Collection API 성능 효과적 개선 (Stream))

[람다식 이해를 위한 기본 용어의 정리]
함수(function) : 기능, 동작을 정의
void abc() {
// 기능 및 동작
}

메서드(method) : 클래스 또는 인터페이스 내부에서 정의된 함수
class A {
void abc() {
// 기능 및 동작
}
}

함수형 인터페이스(functional interface) : 내부에 단 1개의 추상 메서드만 존재하는 인터페이스
interface A {
public abstract void abc();
}

Java는 객체 지향 프로그램으로서 모든 함수는 클래스/인터페이스 내부에만 존재 가능 (클래스 내부의 함수 = 메서드)

// 인터페이스가 함수형 인터페이스임을 보장하기 위해서는 @FunctionalInterface 어노테이션을 붙이면 됨. @FunctionalInterface를 붙이는 것은 선택 사항이지만, 컴파일 과정에서 추상 메서드가 하나인지 검사하기 때문에 정확한 함수형 인터페이스를 작성할 수 있게 도와주는 역할을 함

[본래 의미의 함수적 프로그래밍과 객체 지향형의 개념적 비교]
본래 의미의 함수적 프로그래밍에서의 함수 사용 (자주 사용하는 기능 구현)
STEP 1 : 함수 정의/구현
함수 정의 및 구현
void abc() {
// 메서드(함수) 정의 및 구현
}
STEP 2 : 함수 호출
함수 이름 바로 사용
abc()
// 자바는 새로운 함수 문법을 정의한 것이 아니라 이미 있는 인터페이스를 빌어 람다식을 표현
메서드 정의 → 람다식 표현
메서드의 호출 → 참조 변수.메서드명
(객체 지향과 동일)

[객체 지향형 프로그래밍에서의 메서드(함수=기능) 사용]
STEP 1 : 함수 정의/구현
인터페이스 내 메서드(함수) 정의
클래스 내 메서드(함수) 구현
class A {
void abc() {
// 메서드(함수) 정의 및 구현
}
}
STEP 2 : 객체 생성
타입 참조 변수 = 객체 생성
A a = new A();
STEP 3 : 객체 내부의 메서드 호출
참조 변수.메서드명
a.abc();

객체 지향형 프로그래밍 메서드(함수=기능) 사용
CASE 1 :
interface A {
void abc();
}

class B implements A {
public void abc() {
// 메서드 내용
}
}

A a = new B();

a.abc()

CASE 2 :
interface A {
void abc();
}

// 익명 이너 클래스
A a = new A () {
void abc() {
// 메서드 내용 → 메서드(함수)
}
};

a.abc()

자바의 함수적 프로그래밍(람다식) 함수(=기능) 사용
CASE 3 :
interface A {
void abc();
}

A a = () -> {
// 메서드 내용 → 람다식
};

a.abc()

// 문법적인 의미만 고려하면 람다식은 익명 이너 클래스의 약식 표현

Q. 모든 인터페이스의 구현 메서드는 람다식으로 변환할 수 있을까?
ANS. 함수적 인터페이스의 메서드만 람다식 표현 가능

[메서드(함수) (인터페이스의 구현 메서드) -> 람다식 변환 방법]
메서드(함수) :
리턴 타입 메서드명(입력 매개 변수) {
// 메서드 내용
}

람다식 :
(입력 매개 변수) -> {
// 메서드 내용
}

메서드(함수) :
void method1() {
System.out.println(3);
}

람다식 :
() -> {
System.out.println(3);
}

() -> {System.out.println(3);}

메서드(함수) :
void method2(int a) {
System.out.println(a);
}

람다식 :
(int a) -> {
System.out.println(a);
}

(int a) -> {System.out.println(a);}

메서드(함수) :
int method3() {
return 5;
}

람다식 :
() -> {
return 5;
}

() -> {return 5;}

메서드(함수) :
double method4(int a, double b) {
return a+b;
}

람다식 :
(int a, double b) -> {
return a+b;
}

(int a, double b) -> {return a+b;}

람다식의 약식 표현 1 : 중괄호 안의 실행문이 1개일 때 중괄호 생략 가능
A a = () -> {System.out.println("테스트");}; // 익명 이너 클래스 표현과 람다식의 경우에만 중괄호({}) 다음에 세미콜론(;)이 옴
A a = () -> System.out.println("테스트"); // 실행문이 하나인 경우 중괄호 생략가능

람다식의 약식 표현 2 : 매개 변수 타입의 생략이 가능하고, 매개 변수가 1개일 때 () 생략 가능
A a = (int a) -> {...};
A a = (a) -> {...}; // 매개 변수 타입 생략 가능
A a = a -> {...}; // 매개 변수가 한 개인 경우 () 생략 (return이 생략되는 경우 매개 변수 타입은 반드시 생략해야 함)

람다식의 약식 표현 3 : return 구문만 포함할 때 return 생략 가능
A a = (int a, int b) -> {return a+b;};
A a = (a, b) -> {return a+b;}; // 매개 변수 타입 생략 가능
A a = a, b -> a+b; // 실행문으로 리턴만 있는 경우 return 생략 가능 (return이 생략되는 경우 중괄호는 반드시 생략해야 함)

개념적 정의 : 비어있는 함수적 기능을 정의하는 방법을 제공하는 것
문법적 정의 : 익명 이너 클래스를 약식 표현한 것

[람다식의 활용]
활용 1 : 익명 이너 클래스 내 구현 메서드의 약식(람다식) 표현 (함수적 인터페이스(내부에 한 개의 메서드만 포함한 인터페이스)만 가능)
입력 X, 리턴 X의 함수 :
// 함수형 인터페이스
interface A {
void method1();
}

// 익명 이너 클래스 활용
A a = new A() {
public void method1() {
}
};

// 람다식 활용
A a = () -> {...};

입력 O, 리턴 X의 함수 :
// 함수형 인터페이스
interface A {
void method2(int a);
}

// 익명 이너 클래스 활용
A a = new A() {
public void method2(int a) {
}
};

// 람다식 활용
A a = (int a) -> {...};

입력 X, 리턴 O의 함수 :
// 함수형 인터페이스
interface A {
int method3();
}

// 익명 이너 클래스 활용
A a = new A() {
public int method3(int a) {
return ...
}
};

// 람다식 활용
A a = () -> {return ...};

입력 O, 리턴 O의 함수 :
// 함수형 인터페이스
interface A {
double method4(int a, doueble b);
}

// 익명 이너 클래스 활용
A a = new A() {
public double method4(int a, double b) {
return ...
}
};

// 람다식 활용
A a = (int a, double b) -> {return ...};

활용 2-1 : 인스턴스 메서드 참조 Type 1 // 이미 정의된 인스턴스 메서드 참조
클래스 객체::인스턴스 메서드명 1 :
interface A {
void abc();
}

class B {
void bcd() {
System.out.println("메서드");
}
}

A a = new A() {
public void abc() {
B b = new B();
b. bcd(); // abc() 메서드 = B객체의 bcd() 메서드
}
};

A a = () -> {
B b = new B();
b.bcd();
};

// 클래스 객체::인스턴스 메서드명
B b = new B();
A a = b::bcd;

// 인스턴스 메서드 참조 Type 1을 위해서는 리턴 타입과 매개 변수가 동일하여야 함

클래스 객체::인스턴스 메서드명 2 :
interface A {
void abc(int k);
}

A a = new A() {
public void abc(int k) {
System.out.println(k); // abc(...) 메서드 = System.out.println(...) 메서드
}
};

A a = (k) -> {
System.out.println(k);
};

// 클래스 객체::인스턴스 메서드명
A a = System.out::println;

// 인스턴스 메서드 참조 Type 1을 위해서는 리턴 타입과 매개 변수가 동일하여야 함

활용 2-2 : 정적 메서드 참조 // 이미 정의된 정적 메서드 참조
클래스명::정적 메서드명 :
interface A {
void abc();
}

class B {
static void bcd() {
System.out.println("메서드");
}
}

A a = new A () {
public void abc() {
B.bcd(); // abc() 메서드 = B.bcd() 정적 메서드
}
};

A a = () -> {
B.bcd();
};

// 클래스명::정적 메서드명
A a = B::bcd;

// 정적 메서드 참조를 위해서는 리턴 타입과 매개 변수가 동일하여야 함

활용 2-3 : 인스턴스 메서드 참조 Type 2 // 첫 번째 매개 변수로 전달된 객체의 메서드를 참조하는 경우
클래스명::인스턴스 메서드명 1 :
interface A {
void abc(B b, int k);
}

class B {
void bcd(int k) {
System.out.println(k);
}
}

A a = new A() {
public void abc(B b, int k) {
b.bcd(k); // abc(B b, int k) 메서드 = b.bcd(k) 메서드
}
};

A a = (b, k) -> {
b.bcd(k);
};

// 클래스명::인스턴스 메서드명
A a = B::bcd;

// 인스턴스 메서드 참조 Type 2를 위해서는 인터페이스 메서드 매개 변수가 참조 메서드 매개 변수보다 하나 많음

클래스명::인스턴스 메서드명 2 :
interface A {
int abc(String str);
}

A a = new A() {
public int abc(String str) {
return str.length(); // abc(String str) 메서드 = String 객체의 length() 메서드
}
};

A a = (str) -> str.length();

// 클래스명::인스턴스 메서드명
A a = String::length;

// 인스턴스 메서드 참조 Type 2를 위해서는 인터페이스 메서드 매개 변수가 참조 메서드 매개 변수보다 하나 많음

활용 3-1 : 배열 생성자 참조 (배열의 new 생성자를 참조하는 경우 // interface 메서드의 리턴 타입 = 배열 객체)
배열 타입::new :
interface A {
int[] abc(int len);
}

A a = new A() {
public int[] abc(int len) {
return new int[len]; // abc(int len) 메서드 = new int[len]
}
};

A a = (len) -> new int[len];

// 배열 타입::new
A a = int[]::new;

// 배열 생성자 참조를 위해서는 인터페이스 메서드의 매개 변수로 배열의 길이를 전달

활용 3-2 : 클래스 생성자 참조 (클래스의 new 생성자를 참조하는 경우 // interface 메서드의 리턴 타입 = 클래스 객체)
클래스명::new :
interface A {
B abc();
}

class B {
B() {// 첫번째 생성자}
B(int k) {// 두번째 생성자}
}

A a = new A() {
public B abc() {
return new B(); // abc() 메서드 = new B()
}
};

A a = () -> {
new B();
};

// 클래스명::new
A a = B::new;

// 클래스 생성자 참조를 위해서는 인터페이스 메서드의 매개 변수에 따라 생성자 선택

[자바 API의 함수적 인터페이스]
메서드의 매개 변수에 사용되는 함수적 인터페이스의 개념적 의미 :
자주 사용하는 기능을 정의해 놓는 함수 제공 (X)
자주 사용하는 기능을 정의할 수 있는 함수 제공 (O)

표준형 함수적 인터페이스 :
Consumer<T> // 입력 타입 T → 리턴 없음 (void)
Supplier<T> // 입력 없음 (void) → 리턴 타입 T
Precate<T> // 입력 타입 T → 리턴 타입 true/false
Function<T, R> // 입력 타입 T → 리턴 타입 R

확장형 함수적 인터페이스 :
// Consumer<T> // 입력 타입 T → 리턴 없음 (void)
// 메서드명 : accept()
IntConsumer // 입력 타입 T가 Int → 리턴 없음 (void)
LongConsumer // 입력 타입 T가 Long → 리턴 없음 (void)
DoubleConsumer // 입력 타입 T가 Double → 리턴 없음 (void)
BiConsumer<T, U> // 입력 타입 T, U → 리턴 없음 (void)
// 리턴 타입이 기본 자료형이 아니거나 확장형 인터페이스의 리턴 타입이 모두 동일한 경우 인터페이스 메서드명은 모두 동일함 (확장형 Consumer<T>는 모두 accept())

import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;

public class Consumer_FunctionInterface {
public static void main(String[] args) {

// 1. 익명 이너 클래스를 이용한 객체 생성
Consumer<String> c = new Consumer<String>() {
@Override
public void accept(String t) {
System.out.println(t);
}
};

// 2. 람다식 표현
// 2-1. 기본 Consumer
Consumer<String> c1 = t -> System.out.println(t);
c1.accept("Consumer<T> 함수형 인터페이스");

// 2-2. 확장형 Consumer
IntConsumer c2 = num -> System.out.println("int 값 = " + num);
LongConsumer c3 = num -> System.out.println("long 값 = " + num);
DoubleConsumer c4 = num -> System.out.println("double 값 = " + num);
BiConsumer<String, Integer> c5 = (name, age) -> System.out.println("이름 : " + name + " 나이 : " + age);

c2.accept(3);
c3.accept(5L);
c4.accept(7.8);
c5.accept("홍길동", 16);
}
}

// Supplier<T> // 입력 없음 (void) → 리턴 타입 T
// 메서드명 : get()
BooleanSupplier // 입력 없음 (void) → 리턴 타입 T가 Boolean // getAsBoolean()
IntSupplier // 입력 없음 (void) → 리턴 타입 T가 Int // getAsInt()
LongSupplier // 입력 없음 (void) → 리턴 타입 T가 Long // getAsLong()
DoubleSupplier // 입력 없음 (void) → 리턴 타입 T가 Double // getAsDouble()
// 리턴 타입이 기본 자료형이면서 확장형 인터페이스의 리턴 타입이 다른 경우 인터페이스 메서드명은 서로 다름 (기본 메서드명As리턴 타입명)

import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.Supplier;

public class Supplier_FunctionalInterface {
public static void main(String[] args) {

// 1. 익명 이너 클래스 방법 객체 생성
Supplier<String> s = new Supplier<String>() {
@Override
public String get() {
return "Supplier<T> 함수형 인터페이스";
}
};
System.out.println(s.get()); // Supplier<T> 함수형 인터페이스

// 2. Supplier<T> 함수형 인터페이스
// 2-1. 기본형
Supplier<String> s1 = () -> "Supplier<T> 함수형 인터페이스";
System.out.println(s1.get()); // Supplier<T> 함수형 인터페이스

// 2-2. 확장형
BooleanSupplier s2 = () -> false;
IntSupplier s3 = () -> 2 + 3;
LongSupplier s4 = () -> 10L;
DoubleSupplier s5 = () -> 5.8;

System.out.println(s2.getAsBoolean()); // false
System.out.println(s3.getAsInt()); // 5
System.out.println(s4.getAsLong()); // 10
System.out.println(s5.getAsDouble()); // 5.8
}
}

// Precate<T> // 입력 타입 T → 리턴 타입 true/false
// 메서드명 : test()
IntPredicate // 입력 타입 T가 Int → 리턴 타입 true/false
LongPredicate // 입력 타입 T가 Long → 리턴 타입 true/false
DoublePredicate // 입력 타입 T가 Double → 리턴 타입 true/false
BiPredicate<T, U> // 입력 타입 T, U → 리턴 타입 true/false
// 리턴 타입이 기본 자료형이 아니거나 확장형 인터페이스의 리턴 타입이 모두 동일한 경우 인터페이스 메서드명은 동일함 (확장형 Predicate<T>는 모두 test())

import java.util.function.BiPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.Predicate;

public class Predicate_FunctionalInterface {
public static void main(String[] args) {

// 1. 익명 이너 클래스 방법으로 객체 생성
Predicate<String> p = new Predicate<String>() {
@Override
public boolean test(String t) {
return (t.length() > 0) ? true : false;
}
};

// 2. Predicate<T>의 람다식 표현
// 2-1. 기본형 Predicate<T>
Predicate<String> p1 = (str) -> (str.length() > 0 ? true : false);
System.out.println(p1.test("안녕")); // true
System.out.println();

// 2-2. 확장형 Predicate
IntPredicate p2 = (num) -> (num % 2) == 0 ? true : false;
LongPredicate p3 = (num) -> (num > 100) ? true : false;
DoublePredicate p4 = (num) -> (num > 0) ? true : false;
BiPredicate<String, String> p5 = (str1, str2) -> str1.equals(str2);

System.out.println(p2.test(2)); // true
System.out.println(p3.test(85L)); // false
System.out.println(p4.test(-5.8)); // false
System.out.println(p5.test("안녕", "안녕")); // true
}
}

// Function<T, R> // 입력 타입 T → 리턴 타입 R
// 메서드명 : apply()
IntFunction<R> // 입력 타입 T가 Int → 리턴 타입 R
LongFunction<R> // 입력 타입 T가 Long → 리턴 타입 R
DoubleFunction<R> // 입력 타입 T가 Double → 리턴 타입 R
BiFunction<T, U, R> // 입력 타입 T, U → 리턴 타입 R
// 리턴 타입이 기본 자료형이 아니거나 확장형 인터페이스의 리턴 타입이 모두 동일한 경우 인터페이스 메서드명은 동일함 (이 경우는 모두 apply())
ToIntFunction<T> // 입력 타입 T → 리턴 타입 R이 Int
ToLongFunction<T> // 입력 타입 T → 리턴 타입 R이 Long
ToDoubleFunction<T> // 입력 타입 T → 리턴 타입 R이 Double
// 리턴 타입이 기본 자료형이면서 확장형 인터페이스의 리턴 타입이 다른 경우 인터페이스 메서드명은 서로 다름 (기본 메서드명As리턴 타입명)

import java.util.function.BiFunction;
import java.util.function.DoubleFunction;
import java.util.function.Function;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;

public class Function_FunctionalInterface {
public static void main(String[] args) {

// 1. 익명 이너 클래스 방법으로 객체 생성
Function<String, Integer> f = new Function<String, Integer>() {
@Override
public Integer apply(String t) {
return t.length();
}
};
System.out.println(f.apply("안녕")); // 2

// 2. Function<T, R> 람다식 표현
// 2-1. 기본형
Function<String, Integer> f1 = str -> str.length();
System.out.println(f1.apply("안녕")); // 2

// 2-2. 확장형 (입력(T)이 고정)
IntFunction<Double> f2 = (num) -> (double) num; // int -> double
LongFunction<String> f3 = (num) -> String.valueOf(num); // long -> String
DoubleFunction<Integer> f4 = (num) -> (int) num; // double -> int
BiFunction<String, Integer, String> f5 = (name, age) -> "이름은 = " + name + " 나이는 = " + age; // String, Integer ->

System.out.println(f2.apply(10)); // 10.0
System.out.println(f3.apply(20L)); // 20
System.out.println(f4.apply(30.5)); // 30
System.out.println(f5.apply("홍길동", 16)); // 이름은 : 홍길동 나이는 : 16
System.out.println();

// 2-3. 확장형 (출력(R)이 고정)
ToIntFunction<String> f6 = (str) -> str.length(); // String -> int
ToLongFunction<Double> f7 = (num) -> num.longValue(); // Double -> long
ToDoubleFunction<Integer> f8 = (num) -> num / 100.0; // Integer -> double

System.out.println(f6.applyAsInt("반갑습니다")); // 5
System.out.println(f7.applyAsLong(58.254)); // 58
System.out.println(f8.applyAsDouble(250)); // 2.5
}
}

[메서드의 매개 변수에 사용되는 함수적 인터페이스]
표준형 함수적 인터페이스 (Function을 상속받은 Function의 특수한 케이스) :
UnaryOperator<T> // 입력 타입 T → 리턴 타입 타입 T (input의 개수 1개)
BinaryOperator<T> // 입력 타입 T, T → 리턴 타입 타입 T (input의 개수 2개)

확장형 함수적 인터페이스 :
// UnaryOperator<T> // 입력 타입 T → 리턴 타입 T (input의 개수 1개) // Function<T, T>을 상속
// 메서드명 : apply()
IntUnaryOperator // 입력 타입 Int → 리턴 타입 Int // applyAsInt()
LongUnaryOperator // 입력 타입 Long → 리턴 타입 Long // applyAsLong()
DoubleUnaryOperator // 입력 타입 Double → 리턴 타입 Double // applyAsDouble()
// 리턴 타입이 기본 자료형이면서 확장형 인터페이스의 리턴 타입이 다른 경우 인터페이스 메서드명은 서로 다름 (기본 메서드명As리턴 타입명)

// BinaryOperator<T> // 입력 타입 T, T → 리턴 타입 T (input의 개수 2개) // BiFunction<T, T, T>를 상속
// 메서드명 : apply()
IntBinaryOperator // 입력 타입 Int, Int → 리턴 타입 Int // applyAsInt()
LongBinaryOperator // 입력 타입 Long, Long → 리턴 타입 Long // applyAsLong()
DoubleBinaryOperator // 입력 타입 Double, Double → 리턴 타입 Double // applyAsDouble()
// 리턴 타입이 기본 자료형이면서 확장형 인터페이스의 리턴 타입이 다른 경우 인터페이스 메서드명은 서로 다름 (기본 메서드명As리턴 타입명)

import java.util.function.BinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntUnaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.UnaryOperator;

public class UnaryBinaryOperator_FunctionalInterface {
public static void main(String[] args) {

// 1. 익명 이너 클래스를 이용한 객체 생성 Function<T, T> = UnaryOperator<T>
UnaryOperator<Integer> uo = new UnaryOperator<Integer>() {
@Override
public Integer apply(Integer t) {
return t * 2;
}
};

BinaryOperator<String> bo = new BinaryOperator<String>() {
@Override
public String apply(String t, String u) {
return t + u;
}
};
System.out.println(uo.apply(5)); // 10
System.out.println(bo.apply("안녕", "하세요")); // 안녕하세요
System.out.println();

// 2. 람다식
// 2-1. 기본형
UnaryOperator<Integer> uo1 = value -> value * 2;
System.out.println(uo1.apply(5)); // 10

BinaryOperator<String> bo1 = (value1, value2) -> value1 + value2;
System.out.println(bo1.apply("안녕", "하세요")); // 안녕하세요
System.out.println();

// 2-2. 확장형
IntUnaryOperator uo2 = (num) -> num * 10; // int -> int
LongUnaryOperator uo3 = (num) -> num + 20L; // long -> long
DoubleUnaryOperator uo4 = (num) -> num * 10.0; // double -> double

System.out.println(uo2.applyAsInt(10)); // 100
System.out.println(uo3.applyAsLong(20L)); // 40
System.out.println(uo4.applyAsDouble(30.5)); // 305.0

IntBinaryOperator bo2 = (num1, num2) -> num1 + num2; // int -> int
LongBinaryOperator bo3 = (num1, num2) -> num1 * num2; // long -> long
DoubleBinaryOperator bo4 = (num1, num2) -> num1 / num2; // double -> double

System.out.println(bo2.applyAsInt(10, 20)); // 30
System.out.println(bo3.applyAsLong(20L, 10L)); // 200
System.out.println(bo4.applyAsDouble(40.2, 12.0)); // 3.35
}
}