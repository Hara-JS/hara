웹 개발자 : 웹 사이트를 만들고 관리하며, 역할에 따라 웹 퍼블리셔/UI 개발자, 프론트엔드 개발자, 백엔드 개발자 등이 있음

웹 퍼블리셔 : 웹 사이트에서 보이는 부분을 담당하는 개발자 (국내 → 웹 퍼블리셔 / 해외 → UI 개발자)

프론트엔드 개발자(클라이언트 개발) : 웹 퍼블리셔 역할은 물론 자바스크립트로 프로그래밍 요소를 개발 (모바일 앱을 개발하는 것도 사용자가 직접 보고 다루는 부분을 만드는 것이므로 클라이언트 개발에 해당)

백엔드 개발자(서버 개발자) : 웹 사이트에서 눈에 보이지 않는 요소를 개발 (웹 사이트가 아닌 모바일 앱의 서버를 다루는 개발자도 백엔드 개발자)

풀스택 개발자 : 프론트엔드와 백엔드 관련 지식을 고루 갖추어 양쪽 모두 개발할 줄 아는 개발자 (필요 지식 : 자바스크립트, HTML, CSS, 타입스크립트, 리액트 등)

모바일 개발자 : 스마트폰이나 태블릿, 스마트 워치 등 모바일 기기에서 작동하는 애플리케이션을 개발
안드로이드 개발자 / 안드로이드 기반의 모바일 앱을 개발 (필요 지식 : 코틀린, 자바 등)
IOS 개발자 / 아이폰과 아이패드용 모바일 앱을 개발 (필요 지식 : 스위프트 등)

게임 개발자 : 게임의 전체적인 구조를 설계하고 개발 (알고리즘, 물리 엔진 구현, 3D 그래픽 랜더링, 서버 관리 등) (필요 지식 : 프로그래밍, 컴퓨터, 수학, C++, C#, 자바스크립트, 프레임워크 등)

응용 소프트웨어 개발자 : PC용 프로그램을 개발하는 사람들을 지칭 (필요 지식 : C, 자바, 파이썬, C++, C#, 스위프트 등)

임베디드 개발자 : 하드웨어를 제어하는 소프트웨어를 개발 (하드웨어 개발 + 소프트웨어 개발 → 임베디드 개발자 / 소프트웨어만 개발 → 임베디드 소프트웨어 개발자) (필요 지식 : C, C++, 어셈블리어, 컴퓨터 공학 지식, 보드와 회로를 다루는 능력, 리눅스 커널 등)

정보 보안 전문가 : 각종 보안 위협으로부터 시스템과 서비스를 방어 (데이터 도난이나 손상을 차단하고 컴퓨터 시스템을 보호함) (필요지식 : 프로그래밍, 네트워크, 컴퓨터 구조, 운영체제, 웹, 데이터베이스, 포렌식, 암호학, 악성 코드 분석 등)
해커 (화이트 해커) / 컴퓨터와 프로그래밍에 대한 전문 지식을 가진 사람
크래커 (블랙 해커) / 이를 범죄에 활용하는 사람

AI 개발자 : 인간의 사고와 학습같은 지적 능력을 컴퓨터를 통해 구현하는 기술 (인공지능을 학문적으로 연구하는 연구직, AI 소프트웨어를 개발하는 프로그래머, 데이터에서 의미 있는 정보를 찾아내는 분석가 등) (필요 지식 : 수학, 통계학, 컴퓨터 공학 등)

-

개발 : 요구 사항 분석 → 시스템 명세 → 구조 설계 → 구현 → 테스트 → 유지 보수

코딩 : 프로그래밍 언어로 된 코드를 입력하는 작업

프로그래밍 : 컴퓨터가 할 일의 절차와 알고리즘을 설계하는 것

개발 : 소프트웨어를 설계, 구현, 운영, 관리하는 데 필요한 전반적인 기술과 과정들을 통칭

컴퓨터의 하드웨어가 본체와 CPU, 메모리 등 눈에 보이고 만져지는 부분이라면 소프트웨어는 보이지 않는 부분을 통칭

프로그램은 사용자의 명령에 따라 목적에 맞는 작업을 수행하는 일련의 명령 모음. 시스템 프로그램은 운영체제의 일부로써 컴퓨터 이용 환경을 조성하는 프로그램이며, 응용 프로그램은 사용자가 목적에 따라 직접 사용하는 프로그램

데이터 : 프로그램을 실행하는 데 필요한 기초 자료

라이브러리 : 하나 이상의 프로그램에 활용될 수 있는 데이터와 명령어들의 집합

-

기계어는 컴퓨터가 사용하는 0과 1로 이루어진 언어이며, 기계어를 사람이 이해할 수 있도록 기호로 표현한 언어를 어셈블리어라고 함. 기계어 바로 윗단계에 해당하는 저수준 언어

저수준 언어는 기계어에, 고수준 언어는 사람의 언어에 가까운 언어

프로그래밍 언어란 컴퓨터와 소통하기 위해 만들어진 언어

컴파일 언어는 코드 전체를 기계어로 바꿔 실행 파일을 만들어 실행하고, 인터프리터 언어는 코드를 한 줄 한 줄 읽으면서 해석하고 바로 실행하는 언어

IDE는 개발에 관련된 다양한 기능들을 제공하는 개발용 프로그램

[IDE(Integrated Development Environment)]
이클립스(자바)
인텔리 제이(이클립스와 비슷한 용도이나 더 강력한 기능을 가진 IDE로 유료)
파이참(파이썬)
안드로이드 스튜디오(인텔리제이의 안드로이드 개발용 버전. 자바나 코틀린을 사용하여 안드로이드 앱을 만드는데 사용)
엑스코드(애플이 개발한 IDE. 스위프트를 사용하여 아이폰 앱이나 맥용 프로그램을 만드는 데 사용)
비주얼 스튜디오(마이크로 소프트에서 제작한 IDE. 윈도우 프로그램부터 온라인 서비스 등 다양한 소프트웨어 개발에 사용)
비주얼 스튜디오 코드(가벼운 코드 편집 위주의 기능만 포함하기 때문에 IDE가 아닌 코드 에디터로 분류)

-

디버깅 : 프로그램에서 문제를 찾아 제거하는 것

빌드 : 프로그래밍한 소스 코드를 묶어 실행 가능한 파일을 만드는 것

배포 : 소프트웨어를 사용자들에게 전달하는 것

유지 보수 : 소프트웨어 제품 출시 이후 계속되는 문제 해결 및 각종 업데이트 작업

리팩토링 : 기능을 수정하지 않으면서 코드의 품질을 높이는 것

코드 리뷰 : 서로의 코드를 확인하고 피드백을 주고받는 과정

문서화 : 소프트웨어와 그 소스 코드를 쉽게 파악할 수 있도록 문서를 작성해 두는 것

-

서버 : 정보나 서비스를 제공하는 컴퓨터

클라이언트 : 서버가 제공하는 것을 받아 사용하는 컴퓨터

데이터 센터 : 수많은 서버를 한 곳에서 안정적으로 관리하는 시설

서버 호스팅 : 서버 컴퓨터의 전체 또는 일정 공간을 이용할 수 있도록 임대해 주는 서비스

온프레미스 : 민감한 정보를 다루는 회사들의 경우 호스팅을 외부 데이터 센터에 두지 않고 사내 전산실에 서버를 갖추고 관리하는 것

클라우딩 컴퓨팅 서비스 : 서버를 가상화하여 각종 편의 기능과 함께 필요한 만큼 사용할 수 있는 서비스

[클라우딩 컴퓨팅]
아마존(AWS)
마이크로소프트(애저)
구글(GCP)
네이버(NCP)

[클라우드 서비스 특징]
IaaS(Infrastructure as a Service)
사용자 : 각종 서버 설정부터 서비스 운영까지 직접 수행하는 운영자
특징 : 가상화된 서버 컴퓨터에서 필요한 모든 인프라를 사용자가 구축

PaaS(Platform as a Service)
사용자 : 인프라와 플랫폼을 사용하여 소프트웨어를 개발하는 개발자
특징 : 이미 구축된 인프라 또는 플랫폼을 이용하여 애플리케이션 개발, 실행 및 관리

SaaS(Software as a Service)
사용자 : 클라우드 서비스 소비자
특징 : 모든 인프라, 플랫폼 및 애플리케이션을 제공 업체가 관리하며 웹 브라우저로 제공

-

HTML은 웹 페이지에 요소들을 가져다 놓는 마크업 언어

CSS는 HTML로 올려놓은 요소들을 꾸미는 스타일 언어

자바스크립트는 웹 페이지에 기능들을 부여해 일을 시키는 프로그래밍 언어

웹 표준은 브라우저가 HTML, CSS, 자바스크립트를 읽는 표준화된 방식

반응형 웹(사이트)은 화면 크기에 따라 홈페이지의 크기가 변화하는 웹사이트

적응형 웹(사이트)은 정해진 화면 크기나 기기에 맞게 홈페이지를 따로 제작하는 웹사이트

-

쿠키 : 사용자의 브라우저에 저장되는 정보

세션 : 서버가 사용자를 기억하고 있는 상태

토큰 : 서버가 기억해 둘 필요 없이 사용자가 스스로를 증명할 수 있는 수단

캐시 : 데이터를 다시 가져오지 않도록 가까이 저장해 두는 기술

CDN : 각지에 캐시 서버를 두어 부하를 분산시키는 기술

[쿠키 vs. 세션]
저장 위치 : 사용자의 브라우저 / 서버 (세션 쿠키 제외)
관리 주체 : 사용자 / 서비스 제공자
저장 대상 : 가벼운 편의를 위한 정보 / 서버가 관리해야 할 정보 (예 : 로그인)
유지 기간 : 브라우저를 종료해도 데이터 유지 / 브라우저 종료 시 데이터 삭제
요청 속도 : 빠름 / 느림 (서버 처리 필요)
보안 : 취약 (로컬 기기에 저장) / 좋음 (브라우저 메모리에 저장)

-

네이티브 앱 : 기기에 작동하는 운영체제에 특화된 방식으로 제작된 앱

크로스 플랫폼 : 하나의 소스 코드로 여러 개의 운영체제에서 작동할 수 있는 프로그램을 만드는 방식 (크로스 플랫폼과 각각에 사용되는 언어의 조합 : 플러터X다트, 리액트 네이티브X자바스크립트, 자마린XC#)

웹 앱 : 모바일 기기의 브라우저에서 접속할 수 있는 모바일 웹사이트로, 모바일 앱과 비슷한 UI / UX를 제공

하이브리드 앱 : 네이티브 앱 안에 웹 뷰로 웹사이트를 실행해서 네이티브 앱과 웹 앱의 장점을 취할 수 있는 앱

PWA : 아이콘 추가 등 진보된 브라우저 기능을 활용해서 네이티브 앱 같은 다양한 편의 기능을 제공하는 웹 앱

-

프론트엔드 : 웹사이트의 구성 요소 중 클라이언트 컴퓨터의 브라우저에서 작동하는 부분

백엔드 : 웹사이트나 모바일 앱과 같은 온라인 어플리케이션의 구성 요소 중 서버에서 작동하는 프로그램

프레임워크 : 프로그램의 기본 골격이 갖춰져 있어 개발자가 원하는 제품을 수월하게 만들 수 있도록 출시된 개발 키트

API : 여러 소프트웨어의 특정 기능들을 요청하고 호출하기 위한 약속

XML과 JSON : 데이터를 저장하고 전달할 목적으로 구성된 표기 형식

YAML : 사람이 이해하기 쉬운 형태로 구성된 표기 형식

-

IP : 데이터 통신 규약이며, IP 주소는 PC나 스마트폰 같은 기기의 네트워크 주소

도메인 : 사람이 기억하기 쉽도록 문자로 만들어 특정 IP에 연결한 인터넷 주소

DNS : IP 주소와 이에 해당하는 도메인의 IP 정보를 갱신하며, 특정 도메인에 대한 요청이 들어오면 IP 주소를 찾아 알려주는 시스템

WWW : 전 세계의 사람들이 정보를 공유하고 소통할 수 있는 인터넷 공간

HTTP : 클라이언트의 요청과 서버의 응답으로 이뤄지는 통신 규약

HTTPS : HTTP에 보안 기능을 추가해서 보다 안전하게 만든 통신 규약

1XX : 요청을 성공적으로 받았으며 서버가 해당 작업을 진행 중입니다.
2XX : 요청을 성공적으로 받았으며 요청이 이루어졌습니다.
<자주 사용되는 코드>
- 200 : 요청이 성공적으로 처리됨. 가장 흔히 사용
- 204 : 성공적으로 처리되었지만, 답장에 적어 보낼 내용은 없음
- 206 : 요청에서 지정한 대로, 일부 콘텐츠만 보냄
3XX : 요청을 수행하기 위해서는 해당 요청을 다른 주소로 보내는(redirection) 등 추가 조치가 필요합니다. 자료의 위치가 변경되어 새 URL로 자동 이동시켜줄 때 사용합니다.
4XX : 클라이언트 요청에 문제가 있기 때문에 수행할 수 없습니다.
<자주 사용되는 코드>
- 401 : Unauthorized - 로그인이 필요한 요청인데 로그인되어 있지 않음
- 403 : Forbidden - 로그인되어 있지만 요청을 보낼 권한이 없음
- 404 : Not Found - 요청에 해당하는 데이터가 없음 또는 URL이 잘못되었을 때 등에 나타남
5XX : 요청에는 문제가 없지만, 서버에 이상이 있어 응답할 수 없습니다.
<자주 사용되는 코드>
- 500 : 서버 내부에 오류 발생
- 502 : 서버 과부하 또는 기타 네트워크 문제로 통신이 제대로 되지 않음

-

데이터 : 의미 없이 수집된 자료

정보 : 데이터가 모여서 어떤 의도나 목적에 따라 분석되어 의미가 생긴 자료

데이터 베이스 : 전산상에 저장된 구조화된 데이터 집합
오라클 데이터베이스(오라클)
MySQL(마이에스큐엘)
마이크로소프트 SQL 서버(마이크로소프트 MSSQL)
PostgreSQL(포스트그레스큐엘)
MariaDB(마리아디비)
SQLite(에스큐엘라이트)

DBMS : 데이터베이스를 구축하고 관리하는 프로그램

RDBMS : 관계형 데이터베이스라고 하며, 컬럼(열) 간에 관계를 가질 수 있는 표 형태로 데이터를 저장하는 모델의 DBMS

SQL : 관계형 데이터베이스에 작업을 지시하기 위해 사용되는 언어

NoSQL : 관계형을 제외한 모델을 사용하는 DBMS를 가리키는 용어

문서 데이터베이스 : 데이터를 문서의 형태로 저장

키-값 데이터베이스 : 키와 값의 쌍만을 저장하는 단순한 형태의 데이터베이스

그래프 데이터베이스 : 여러 노드(node)와 그들 간의 관계를 뜻하는 엣지(edge)로 구성된 자료 구조. 그래프 데이터베이스는 여기에 각 노드의 정보인 프로퍼티(property)를 더해서 데이터로 저장

-

운영체제 : 사람이 컴퓨터를 쉽게 사용할 수 있도록 해 주는 시스템 소프트웨어

[리눅스(커널)]
데비안 계열 - 데비안, 칼리 리눅스 라즈베리 파이 OS 등 / (우분투 계열) 우분투, 리눅스 민트, Elementary OS 등
페도라 계열 - 페도라 타이젠 등 / (레드햇 계열) 레드햇 엔터프라이즈 리눅스, Centos, Rocky Linux 등
아치 계열 - 아치 리눅스, 만자로 리눅스 등
젠투 계열 - 젠투 리눅스, 크로미움 OS 등
안드로이드 - 안드로이드, 기타 커스텀 OS
기타 - openSUSE 등

GUI(Graphical User Interface) : 그래픽 요소를 사용해서 직관적이고 편리하게 구성한 인터페이스

CLI(Command Line Interface) : 명령어 줄을 입력해서 사용할 수 있는 인터페이스

커널 : 운영체제의 핵심 기능을 담당하는 핵심 요소

응용 프로그램
↑↓
사용자 인터페이스
↑↓
커널
↑↓
하드웨어, cpu, 메모리, 기타 기기

오픈 소스 : 누구나 소스 코드를 볼 수 있고 개발에 참여할 수 있는 소프트웨어

-

CPU : 컴퓨터를 통제하고 주어진 작업을 수행하는 장치

메모리 : 컴퓨터의 작업에 사용되는 데이터를 일시적 또는 영구적으로 저장하는 장치

입출력 장치 (I/O) : 컴퓨터에 신호와 정보를 보내는 입력 장치와 컴퓨터의 연산을 결과로 내보내는 출력 장치

프로세스 : 프로그램이 메모리에 올려져 CPU에 의해 실행되는 상태

스레드 : 하나의 프로세스 안에서 돌아가는 한 개 이상의 작업 단위

-

비트 : 0과 1 두 값을 가지는 것으로 컴퓨터가 다루는 데이터의 최소 단위

바이트 : 8개의 비트가 모인 것

자료형 : 프로그래밍 언어에서 여러 종류의 데이터를 저장하는 방식

문자 인코딩 : 사람이 사용하는 문자를 컴퓨터가 인지 가능한 숫자로 바꾸는 것

유니코드 : 전 세계에서 사용되는 대부분의 문자를 포함한 문자열 셋

-

컴파일 언어 : 실행되기 전 다른 형식으로 변역되는 언어

인터프리터 언어 : 작성된 코드 그대로 통역되어 실행되는 언어

절차지향 프로그래밍 : 소스 코드를 위에서부터 차례대로 읽고 실행하는 방식

객체지향 프로그래밍 : 프로그램을 객체 단위로 나누어 프로그래밍하는 방식

함수형 프로그래밍 : 함수형 기능들을 활용해서 변수의 사용을 최소화하는 프로그래밍 방식

매니지드 언어 : 언어 자체에서 메모리를 관리해 주는 언어

언매니지드 언어 : 개발자가 직업 메모리를 관리해야 하는 언어

-

컴파일 오류 : 소스 코드를 컴파일하는 과정에서 일어나는 오류

런타임 오류 : 프로그램 실행 도중 발생하는 오류

논리 오류 : 컴파일과 실행 모두 성공하지만 실행 결과가 올바르지 않은 오류

예외 처리 : 오류 발생 시에도 프로세스를 지속시킬 수 있는 수단

메모리 누수 : 사용하지 않는 데이터가 비워지지 않고 메인 메모리 공간에 쌓여있는 현상

가비지 컬렉션 : 메인 메모리상 불필요한 데이터를 자동으로 치우는 기능

[오류의 종류와 특징]
컴파일 오류 :
컴파일 단계에서 발생하는 경우
키워드, 맞춤법이 틀린 경우
필요한 문장 부호가 빠진 경우
선언되지 않은 변수를 사용한 경우

런타임 오류 :
프로그램 실행 중 발생하는 경우
0으로 나누는 경우
무한 루프에 빠지는 경우
Null 오류

논리 오류 : 컴파일 및 실행은 되지만 사용자가 의도한 결과가 나오지 않는 경우
구문 오류 : 프로그래밍 언어의 사용법에 맞지 않는 코드로 인해 발생하는 경우

-

패키지 매니저 : 라이브러리의 설치, 업데이트, 삭제 등을 관리하는 소프트웨어 도구

환경 변수 : 프로그램이 작동할 환경에 지정된 변경 가능한 값

프레임워크 : 기반으로 삼아서 프레임워크 자체를 사용하는 것

[프로그래밍 언어별 인기 웹 프레임워크]
자바 : 스프링(Spring)
C# : 닷넷(.Net), 블레이저(Blazor)
파이썬 : 장고(django), 플라스크(Flask)
자바스크립트 : 뷰(Vue.js), 리액트(React), 앵귤러(Angular)
루비 : 루비 온 레일즈(Ruby on Rails)
PHP : 라라벨(Laravel), 코드이그나이터(CodeIgniter)

라이브러리 : 라이브러리 자체를 가져다 사용하고 호출하는 용도

런타임 환경 : 프로그램이 작동할 수 있도록 해 주는 소프트웨어

SDK(Software Development Kit) : 특정 언어나 환경의 소프트웨어를 개발할 수 있도록 제공되는 키트

-

VCS(Version Control System) : 프로젝트의 변경 내역을 관리하는 시스템으로, 소프트웨어를 개발할 때 일정 시점과 단위로 프로젝트를 관리하는 역할을 함. 또한 소스 코드 백업과 복구를 쉽게 도와주고 다른 업무자들과 협업을 용이하게 도와줌

Git : 가장 널리 사용되는 VCS. Git은 프로젝트 작업 상태를 저장하는 커밋, 각 작업을 본 프로젝트에 업로드하는 푸시, 다른 작업자들이 수정한 코드를 가져오는 풀과 같은 기능으로 프로젝트를 관리하고 협업함

Git 호스팅 서비스 : Git으로 관리하는 프로젝트를 저장하는 공용 저장소를 제공하는 서비스