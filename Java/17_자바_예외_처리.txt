[예외(Exception)와 에러(Error)의 차이점]
예외(Exception) : 연산 오류, 포맷 오류 등 상황에 따라 개발자가 해결 가능한 오류
// int a = 1/0 // 연산 불가 → 해결책 1 : 최대값 부여, 해결책 2 : 해당 연산 제외

에러(Error) : JVM 자체의 오류로 개발자가 해결할 수 없는 오류
// OutOfMemoryError, ThreadDeath // cf. windows의 파란 화면

Object
↑
Throwable
↑
Error / Exception

[예외(Exception) 클래스의 상속 구조]
Exception
↑
일반 예외(Checked Exception) : 컴파일 전에 체크. 예외 처리를 하지 않으면 컴파일 자체가 불가능
ClassNotFoundException (Class가 없는 경우 예외 발생 가능)
/ InterruptedException (Thread 실행 중 interrupt 발생 가능)
/ IOException (입출력 수행 시 예외 발생 가능)
/ FileNotFoundException (File이 없는 경우 예외 발생 가능)
/ CloneNotSupportedException (Class가 Clonable 인터페이스를 구현하지 않은 경우 예외 발생 가능)
실행 예외(UnChecked Exception(Runtime Exception)) : 실행시 체크. 예외 처리를 하지 않아도 컴파일은 가능. 실행 중 예외가 발생하면 프로그램 종료
/ RuntimeException
↑
ArithmeticException (연산 불가로 인한 예외 발생)
/ ClassCastException (Class 캐스팅이 불가능한 경우 예외 발생 가능)
/ NumberFormatException (Number(숫자)가 아닌 것을 숫자로 바꿀 때 예외 발생)
/ NullPointException (객체를 생성하지 않고 멤버를 사용할 때 예외 발생 가능)
/ ArrayIndexOutOfBoundsException (입출력 수행시 예외 발생 가능)

[예외 처리]
일반 예외(Checked Exception) : 컴파일 자체가 불가능
실행 예외(UnChecked Exception) : 예외 발생 시 프로그램 종료 (예외 메시지 출력)
// 예외 처리 → 정상 실행 가능

예외 처리 문법 :
try {
// 일반 예외, 실행 예외 발생 가능 코드
}
catch (예외 클래스명 참조 변수명) {
// 해당 예외가 발생한 경우 처리 블록
}
finally { // 생략 가능
// 예외 발생 여부에 상관없이 무조건 실행 블록
}

try{} block에서 예외 발생 → JVM (발생한 예외 클래스 객체 생성) → 생성 객체를 받을 수 있는 catch(){} block으로 전달
// 개념상 JVM은 해당 예외 객체를 매개 변수로 하는 catch() 메서드를 호출하는 개념 (실제 메서드는 절대 아님)
// 만일 JVM에서 생성된 예외 객체를 받을 수 있는 catch(){} 블록이 없는 경우 예외 처리가 되지 않음

[다중 예외 처리]
try-catch 블록에서 catch 블록은 여러 개 사용 가능
발생한 예외 객체를 받을 수 있는 catch 블록 실행
catch 블록은 if-else if 구문처럼 위에서 부터 순차적으로 확인하여 하나의 catch 블록만을 실행
Exception은 모든 예외 클래스의 부모 클래스이므로 모든 예외 객체를 받을 수 있음 (if문의 else{}의 개념)
하나의 catch 블록에서 여러 개의 예외 처리 가능. 예외 타입을 OR(|) 연산자로 연결

[리소스 자동 해제 예외 처리(try with resource) : 리소스를 자동으로 해제할 수 있는 문법 구조]
try (리소스 자동 해제가 필요한 객체 생성) {
// 리소스를 사용하지 않는 예외 발생 가능 코드
}
catch (예외 클래스명 참조 변수명) {
// 해당 예외가 발생한 경우 처리 블록
}
finally {
// 예외 발생 여부에 상관없이 무조건 실행 블록
}

InputStreamReader is = null;
try {
is = new InputStreamReader(System.in);
System.out.println(is.read());
} catch (IOException e) {
// 예외 처리
} finally {
if (is != null) {
try {
is.close(); // 리소스 반납
} catch (IOException e) {
// 예외 처리
}
}
}
// 위의 코드가 너무 복잡하여 탄생한게 try with resource 구문

try (InputStreamReader is = new InputStreamReader(System.in);) {
System.out.println(is.read());
} catch (IOException e) {
// 예외 처리
}
// 예외 발생 여부와 관계 없이 try-catch 완료 후 자동으로 is.close() 실행
// 자동 해제 리소스 객체는 반드시 close 메서드를 포함하여야 함
// 자동 해제 리소스 객체는 AutoCloseble 인터페이스를 구현하여야 함

class A implements AutoCloseable {
String resource;

A(String resource) {
this.resource = resource;
}

void abc() throws Exception { // try-catch 블록 사용을 위해서 추가
}

@override
public void close() throws Exception {
if (resource != null) {
resource = null;
System.out.println("리소스 해제");
}
}
}

// 리소스를 사용하고 finally에서 리소스 해제하기
A a1 = null;
try {
a1.new A("특정 파일");
a1.abc();
} catch (Exception e) {
System.out.println("예외 처리");
} finally {
if (a1.resource != null)
try {
a1.close();
} catch (Exception e) {
}
}

// try with resource 구문을 이용해서 자동으로 해제
try (A a2 = new A("특정 파일");) {
a2.abc();
} catch (Exception e) {
System.out.println("예외 처리");
}

[예외 전가(throws)]
예외 처리를 자신이 호출된 지점으로 전가 (이 경우 예외 처리는 전가받은 상위 위치에서 처리)

예외 전가 구조 :
리턴 타입 메서드명(입력 매개 변수) throws 예외 클래스명 {
// 예외 발생 코드
}

// CASE 1 : bcd() 메서드가 스스로 예외를 처리한 경우
void abc() {
bcd(); // 호출
}

void bcd() {
try {
// 예외 가능 블록;
}
catch(예외 클래스 타입 참조 변수) {
// 예외 처리
}
}

// CASE 2 : bcd()가 자신을 호출한 abc()에 예외를 전가한 경우 (이 경우 abc() 메서드가 예외를 처리하여야 함)
void abc() {
try {
bcd(); // 호출
}
catch(예외 클래스 타입 참조 변수) {
// 예외 처리
}
}

void bcd() throws 예외 클래스 타입 { // 예외 전가
// 예외 가능 블록 // 예외 전가
}

Q. 상위 메서드들이 예외를 처리하지 않고 계속 전가만 한다면?
ANS. JVM까지 전달. 예외의 원인 출력 + 프로그램 종료

[예외의 다중 전가]
여러 개의 예외를 한 번에 전가 가능

다중 예외 전가 구조 :
리턴 타입 메서드명(입력 매개 변수) throws 예외 클래스 A, 예외 클래스 B {
// 여러 개의 예외 종류가 발생할 수 있는 블록
}

// 하위 메서드에 직접 예외를 처리할 때
class A {
void abc() {
bcd();
}

void bcd() {
try {
Class cls = Class.forName("java.lang.Object"); // ClassNotFoundException
Thread.sleep(1000); // InterruptedException
} catch (ClassNotFoundException | InterruptedException e) {
// 예외 처리 구문
}
}
}

// 예외를 호출 메서드로 전가할 때
class B {
void abc() {
try {
bcd(); // InterruptedException
} catch (InterruptedException | ClassNotFoundException e) {
// 예외 처리 구문
}
}

void bcd() throws ClassNotFoundException, InterruptedException {
Class cls = Class.forName("java.lang.Object"); // ClassNotFoundException
Thread.sleep(1000); // InterruptedException
}
}

[사용자 정의 예외 클래스 작성 및 발생 방법]
STEP 1 : 사용자 정의 예외 클래스 작성 방법 (Exception / RuntimeException 상속 (생성자 2개 지정))
// Exception 상속 : 일반 예외(Checked Exception)로 생성
// RuntimeException 상속 : 실행 예외(UnChecked Exception)로 생성
STEP 2 : 사용자 정의 예외 클래스 객체 생성
STEP 3 : 예외 발생 시키기 (throw 예외 객체)

예외를 발생시킨 메서드는 해당 예외를 처리하거나 상위 메서드로 전달하여야 함
방법 : 예외를 해당 메서드 안에서 직접 처리 / 예외를 상위 메서드로 전가해 예외 처리

[예외 클래스의 대표적인 메서드]
모든 예외 클래스는 Throwable 클래스를 상속하며 getMessage(), printStackTrace()는 Throwable 클래스의 메서드
getMessage() : 예외 발생시 생성자로 넘긴 메시지를 문자열 형태로 리턴 // 예외 메시지
printStackTrace() : 예외 발생이 이루어지는 경로(호출 순서)를 출력 // 예외 발생 경로 출력