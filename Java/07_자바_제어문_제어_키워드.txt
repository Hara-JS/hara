모든 제어문(5종류)은 중괄호({})를 가짐. 중괄호 안의 실행문이 1개인 경우 생략 가능 (컴파일러에 의해서 자동으로 삽입)

[선택 제어문]
if 제어문 : if(조건식) {실행 내용;(true일 때만 실행)} / if(조건식) {실행 내용;(true일 때만 실행)} else {실행 내용;(false일 때만 실행)} / if(조건식1) {실행 내용;(조건식1이 true일 때 실행)} else if(조건식2) {실행 내용;(조건식2가 true일 때 실행)} else if(조건식3) {실행 내용;(조건식3이 true일 때 실행)} else {실행 내용;(모든 조건식이 false일 때 실행)} (처음 true가 나오는 블록만 실행 후 if문 탈출)

switch 제어문 : switch(점프 위치 변수) {case 위치값1: 실행 내용; case 위치값2: 실행 내용; case 위치값n: 실행 내용; default: 실행 내용;} // switch는 특정 위치로 점프시키는 역할. 0개 이상의 case절과 0이나 1개의 default절로 구성. 연산식 : 정수, 문자, 문자열. default는 if-else에서 else에 해당. 콜론(:)은 이정표의 역할(점프 위치 표시) switch문 탈출을 위해서는 break 키워드 사용. switch문은 if문과 상호 변환 가능. 하나의 실행문에 break을 사용하지 않고 여러 개의 case를 연결하는 경우 코드가 간결해질 수도 있음

[반복 제어문]
for 제어문 : for(초기식; 조건식; 증감식) {실행 내용;} // 초기식 : for문이 시작될 때 딱 1번 실행, 조건식 : for문 안으로 들어가는 유일한 출입구(true인 경우 진입, false이면 for문 종료, 증감식(for문의 닫힌 괄호(}) 이후에 실행) for문의 경우 반복 횟수가 정해진 경우 주로 사용 (for문을 보면 반복 횟수를 알 수 있어야 함) 조건식이 true인 동안 실행. 컴파일러는 문법적으로 괄호안에 세미콜론이 2개인지만 체크. 조건식이 비워져 있는 경우 컴파일러는 조건식 true로 입력. 초기식과 증감식에 쉼표를 사용하여 여러 개 구성 가능. 무한루프도 break을 이용하여 탈출 가능

while 제어문 : 초기식; while(조건식) {실행 내용; 증감식;} // while문에서는 조건식을 생략할 수 없음 (for문의 경우 조건식 생략시 컴파일러가 true 입력) while문과 for문은 상호 변환 가능. 무한루프가 아닌 경우 while문에는 for문과 같이 초기식, 조건식, 증감식이 모두 포함되어야 함. while문의 경우 반복 횟수가 정해지지 않고 특정 조건까지 반복하고자 할 때 주로 사용

do-while 제어문 : 초기식; do {실행 내용; 증감식;} while(조건식); // 최초 1회는 무조건 실행. do-while문과 while문은 최초 실행 순서만 상이함. do-while문은 제어문 중 유일하게 세미콜론으로 마침 (중괄호({})로 끝나지 않기 때문) do-while문과 while문은 반복 횟수가 1회 이상일때는 동일한 결과

[제어 키워드]
break (if문을 제외한 가장 가까운 중괄호({}) 하나를 탈출. if(조건문) 없이 break을 사용하는 경우는 거의 없음) / break + LABLE : 레이블명 다음에는 콜론(:)이 오며 개념적으로 콜론은 점프할 위치를 의미

continue (continue는 if문을 제외한 가장 가까운 닫힌 중괄호(})로 대치되는 개념. for문의 닫힌 중괄호인 것처럼 동작. if(조건문)없이 continue를 사용하는 경우는 거의 없음) / continue + LABLE : 레이블명 다음에는 콜론(:)이 오며 개념적으로 콜론은 점프할 위치를 의미