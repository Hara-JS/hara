[연산자]
산술 연산자 : +, -, *, /, %(modulo. 나눈 나머지 값을 출력. 나누는 뒤에 값이 더 크면 앞에 값이 그대로 나옴) // (값)

증감 연산자 : ++, -- (전위형 : 연산 전 증감 수행 ++변수명 / 후위형 : 연산 후 증감 수행 변수명++) // (값)

비트 연산자 : &(AND), |(OR), ^(XOR), ~(NOT 부호비트 : 첫번째 비트. 0:양수, 1:음수 / 양수 읽는 법 : 1을 기준으로 값 읽음. 음수 읽는 법 : 0을 기준으로 값 읽음 +1) // (값)

쉬프트 연산자 : <<(left shift. 양수와 음수 동일 방식. 1 bit당 *2 + 부호 유지, 빈칸은 0으로 채움), >>(right shift. 양수 : 1 bit당 /2 + 부호 유지 + 소수 버림. 음수 : 1 bit당 /2 + 부호 유지 + 소수 올림. 빈칸은 부호 비트 값으로 채움), >>>(logical right shift. 부호 비트 상관없이 쉬프트 수행. 부호 비트 변화에 따라 부호 변동 생길 수 있음. 빈칸은 부호 비트와 관계없이 0으로 채움) (쉬프트 연산자를 비트에서 확인하기 위해서는 32 bit(int의 바이트 수)로 변환하여 고려하여야 함) // (값)

비교 연산자 : <, >, <=, >=(데이터 크기의 대소 비교), ==, !=(데이터 크기의 등가 비교. 등가 비교는 stack 메모리의 값을 비교. 등호(=)가 다른 부호와 함께 사용되는 경우 등호는 항상 오른쪽에 위치함) // (boolean)

논리 연산자 : &&(AND), ||(OR), ^(XOR), !(NOT) (논리 연산자의 좌우에는 반드시 true/false만 올 수 있음. Short Circuit : 연산 수행시 결과가 이미 확정된 경우 나머지 연산 과정을 수행하지 않는 것. 비트 연산자의 ^(XOR)와 논리 연산자의 ^(XOR)는 모두 쇼트 서킷(short circuit) 미적용. XOR는 구조상 반드시 두개를 다 확인해야 결과값 결정. 비교 연산자와 논리 연산자의 차이는 short sircuit의 사용 유무이기 때문에 비트 연산자의 ^(XOR)와 논리 연산자의 ^(XOR)는 기호가 같음) // (boolean)

대입 연산자 : =, +=, -=, *=, /=, &=, |=, >>=, <<=, >>>= (오른쪽의 연산결과를 왼쪽에 대입) // (실행)

삼항 연산자 : (참 또는 거짓)? x : y (삼항 연산자는 if-else 제어문으로 변경 가능) // (실행)