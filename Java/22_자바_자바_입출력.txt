[File 객체 생성]
자바의 File 클래스는 파일(file)과 폴더(directory)를 관리하는 클래스

[파일 객체를 생성하기 위한 4가지 생성자]
File(String pathname) :
pathname 위치를 가리키는 파일 객체 생성 // 문자열로 파일 또는 폴더의 경로를 입력받아 해당 위치를 가리키는 File 객체를 생성
File(File parent, String child) :
parent 폴더에 child 파일을 가리키는 파일 객체 생성 // 부모 경로와 자식 경로를 분리해 매개 변수로 입력받는 생성자이며, 부모 경로는 각각 File 또는 String 타입의 객체로 넘겨받음
File(String parent, String child) :
parent 폴더에 child 파일을 가리키는 파일 객체 생성 // 부모 경로와 자식 경로를 분리해 매개 변수로 입력받는 생성자이며, 부모 경로는 각각 File 또는 String 타입의 객체로 넘겨받음
File(URI uri) :
uri 위치를 가리키는 파일 객체 생성 // 파일 또는 폴더의 경로를 URI 타입으로 입력받는 매개 변수 // URI(Uniform resource identifier)는 통합 자원 식별자로, 인터넷 상의 주소를 나타내는 URL(Uniform resource locator)을 포함하는 상위 개념. 즉, URI에는 정보의 주소 이외에 사용자 이름과 비밀 번호 등 정보와 관련된 정보가 포함됨

파일 객체를 생성하는 시점에서는 File 객체는 실제 파일의 존재 여부와는 상관없음 (파일이 없는 경우 사용하려고 하는 시점에서 FileNotFoundException 발생)

[실제 파일의 생성]
파일 또는 폴더의 존재 여부 확인 메서드 :
boolean exists()

경로 위치에 파일 생성 :
boolean createNewFile()

경로 위치에 폴더 생성 :
boolean mkdir()

"C:/temp/newFile.txt"를 가리키는 파일 객체를 1개 생성한 후 실제 파일의 존재 여부를 확인하고, 존재하지 않을 때 실제 파일을 생성하는 예 :
파일 객체 생성 및 존재 여부에 따른 실제 파일 생성
// 파일 객체 생성
File newFile = new File("C:/temp/newFile.txt");
// 파일이 없는 경우 실제 파일 생성
if(!newFile.exists()) newFile.createNewFile();
// Windows NTFS 파일 시스템의 경우 권한 문제로 자바 코드로 C:/ 드라이브 루트 위치에 파일을 쓰는 것을 허용하지 않음
해결책 : 이클립스 관리자 권한으로 실행하면 동작 가능. 가능한 C:/ 드라이브에 파일을 직접 생성하는 일은 지양하는 것이 좋음

[File 경로 표시]
파일의 경로를 표시할 때 상위 경로와 하위 경로를 구분하기 위해 File 구분자(separator)를 이용

System 별 File 구분자 가져오기 :
File의 정적 필드 File.separator

Windows 파일 구분자 : '\(역슬래시)' // 쌍따옴표("") 내에서는 \를 제어 문자로 인식하므로 윈도우 시스템의 문자열 안에서 경로를 표기할 때는 반드시 \\와 같이 2개를 연속적으로 표기해야 함
Mac 파일 구분자 : '/(슬래시)' // Windows(Windows 10 기준)에서는 두개 다 동작하기 때문에 혼용해도 무방

// C:\abc\bcd.txt
Windows : String path = "C:\\abc\\bcd.txt"
Mac : String path = "C:/abc/bcd.txt"
// 공통 사용 가능
String path = "C:" + File.separator + "abc" + File.separator + "bcd.txt"

[File의 절대 경로 vs. 상대 경로]
File의 절대 경로(absolute path) : 드라이브명(C:, D: 등)부터 특정 위치까지 절대적인 경로를 표기하는 방식

절대 경로를 이용해 File 객체를 생성한 예 :
File newFile1 = new File("C:/abc/newFile11.txt"); // C:\abc\newFile11.txt
File newFile2 = new File("C:/abc/bcd/newFile12.txt"); // C:\abc\bcd\newFile12.txt

File의 상대 경로(relative path) : 현재 작업 폴더(working directory) 위치를 기준으로 상대적인 경로를 표기하는 방식

상대 경로를 이용해 File 객체를 생성한 예 (현재 작업 폴더의 위치가 C:/abc 폴더일 때) :
File newFile1 = new File("newFile21.txt"); // C:\abc\newFile21.txt
File newFile2 = new File("bcd/newFile22.txt"); // C:\abc\bcd\newFile22.txt

절대 경로 가져오기 :
public String getAbsolutePath()

작업 폴더의 위치 구하기 :
public static String getProperty(String key)

// System.getProperty() 메서드로 가져올 수 있는 다양한 값 (System 클래스의 정적 메서드인 getProperty(String key) 메서드는 자바 가상 머신이 동작할 때 적용되는 시스템 속성값을 가져옴. 속성값은 Key와 Value로 구성되어 있음)
System 클래스의 정적 메서드 getProperty()의 매개 변수로 사용되는 Key와 Value의 의미 :
Key / Value
java.version / Java 버전
java.vendor / Java 공급자
java.vendor.url / Java 공급자의 주소
java.home / Java가 위치한 디렉터리
java.class.version / Java 클래스 버전
java.class.path / Java 클래스의 경로
user.name / 사용자 계정
user.home / 사용자 홈 디렉터리
user.dir / 현재 디렉터리
os.name / 운영체제 이름
os.orch / 운영체제 아키텍처
os.version / 운영체제 버전 정보
file.separator / 파일 구분 문자
path.separator / 경로 구분 문자
line.separator / 행 구분 문자

[File 클래스의 주요 메서드]
리턴 타입 / 메서드명 / 기능
boolean / isDirectory() / 폴더 여부를 참 또는 거짓으로 리턴
boolean / isFile() / 파일 여부를 참 또는 거짓으로 리턴
String / getName() / 파일의 이름을 문자열로 리턴
String / getParent() / 부모 폴더의 이름을 문자열로 리턴
String[] / list() / 경로 내의 폴더와 파일 이름을 문자열 배열로 리턴
File[] / listFiles() / 경로 내의 폴더와 파일 이름을 파일 객체 배열로 리턴
boolean / mkdir() / 해당 경로에 폴더 생성 (하위 폴더만 생성 가능)
boolean / mkdirs() / 존재하지 않는 경로상의 모든 폴더 생성
String / getAbsolutePath() / 파일의 절대 경로를 문자열로 리턴

[아스키(ASCII) vs. 유니코드(Unicode)]
ASCII : 미국 정보 교환 표준 부호(American Standard Code for Information Interchange)의 약자
영문, 알파벳, 숫자, 특수 기호, 제어 코드로 구성된 코드표
7 bit 정보 포함 (실제 8 bit) (MSB bit : 0(디폴트) // 표준 ASCII 코드, MSB : 1 // 나라별 코드 첨가(16개 버전))
// MSB(Most Significant Bit) : 최상위 비트, LSB(Least Significant Bit) : 최하위 비트
한국어, 일본어, 중국어의 문자 표현은?
EUC-KR, EUC-JP, EUC-CN // EUC-KR와 EUC-JP를 하나의 시스템에서 동시 사용 불가(코드 중복)

Unicode : 하나의 문자셋에 국가별 모든 문자셋 통합. 다국어 문자를 동시에 표현할 수 있음

[한글(영문/한자) 전용 문자셋 : EUC-KR]
KS 완성형(공식 명칭 : KS C 5601-1987) : 초기의 한글 완성형 문자셋
한글 문자 11,172자(초성(19)x중성(21)x종성(27+1(종성이 없는 경우))=11,172) 중 2,350자만 표기. 나머지 8,822 글자 누락(누락된 한글 문자는 표준 맞춤법에 위배되는 '뷁'등의 문자가 포함)

EUC-KR : KS X 1001 한국 산업 규격으로 지정된 한국어 문자 집합
KS완성형 + ASCII로 구성. 즉, 한글 2,350자 표현 가능 (한자 4,888자 포함)
국가 표준으로 한글 웹페이지 표준 문자셋으로 사용
ASCII 대응 문자는 1 byte

[한글(영문/한자) 전용 문자셋 : MS949]
Windows에서 사용되는 한글 완성형 표기 (2 byte) (cf. Mac : UTF-8) : 영문은 모두 1 byte
EUC-KR에 누락된 8,822자를 포함한 Microsoft에서 도입한 한글 기본 문자셋 (즉, EUC-KR(KS완성형 + ASCII) + 누락된 8,822자)
EUC-KR과 하위 호환성을 가짐
비표준으로 한글 웹페이지를 만드는 경우 EUC-KR 문자셋 사용
ASCII 대응 문자는 1 byte

문자열 → byte[] 변환 및 byte[] → 문자열 변환 방법 :
동작 / 방법 / 의미
문자열 → byte[] / 문자열.getBytes(문자셋) / 문자셋을 기준으로 문자열을 byte[]로 분해해라
byte[] → 문자열 / new String(byte[], 문자셋) / 문자셋을 기준으로 byte[]을 문자열로 조합해라

[대표적인 유니코드 문자셋 : UTF-16]
고정 길이 문자 인코딩 방식 (2byte) : 영문 및 한글 동일
자바에서의 char 자료형 저장을 위해 사용되는 방식 (char : 2 byte)
저장 문자열 앞에 Little Endian/Big Endian 방식의 구분을 위한 2 byte (0xFEFF) BOM(Byte Order Mark) 코드 삽입
// "abc".getBytes("UTF-16") // FE FF 00 61 00 62 00 63 (8 byte) // FE FF가 BOM 코드
// "가나다".getBytes("UTF-16") // FE FF AC 00 B0 98 B2 E4 (8 byte) // FE FF가 BOM 코드

[대표적인 유니코드 문자셋 : UTF-8]
가변 길이 문자 인코딩 방식 (1 byte ~ 4 byte)
대부분의 웹 서버(Apache, IIS, NginX 등), 데이터베이스(MySQL 등), 리눅스, Mac 시스템의 기본 인코딩 방식
유니코드 한 문자를 나타내기 위해 1 byte ~ 4 byte 까지를 사용 (4 byte로 표현되는 문자는 모두 기본 다국어 평면(BMP) 바깥의 유니코드 문자로 거의 사용 안됨)
한글은 3 byte로 표현 (U+AC00(가) ~ U+D7A3(힣))
// "abc".getBytes("UTF-8") // 61 62 63 (3 byte)
// "가나다".getBytes("UTF-8") // EA B0 80 EB 82 98 EB 8B A4 (9 byte)

[자바의 문자셋(Charset)]
java.nio.charset.Charset 클래스로 정의

Charset 객체 생성을 위한 2가지 정적 메서드 :
메서드 / 동작
static Charset defaultCharset() / 현재 설정되어 있는 디폴트 문자셋 리턴 (최소 파일 단위까지 지정 가능. 일반적으로 프로젝트 또는 워크스페이스 단위로 설정). 미설정했을 때 기본 문자셋 (Windows JVM : MS949, Mac JVM : UTF-8)
static Charset forName(String charsetName) / 매개 변수로 넘어온 charsetName의 문자셋 리턴. 지원하지 않는 문자셋의 경우 UnsupportCharsetException 발생

// JVM에서의 문자셋 지원 여부 확인 : 정적 메서드 isSupported()
public static boolean isSupported(String charsetName)

[자바 코드로 파일 생성 / 이클립스 new file 생성 파일 문자셋]
Charset.defaultCharset() // x-windows-949
Case 1 : 영어/숫자 등 ASCII 범위만 사용한 경우 (UTF-8로 기본 생성)
Case 2 : 한글이 포함된 경우 (MS949(ANSI)로 생성)
Charset.defaultCharset() // UTF-8
Case 1 : 영어/숫자 등 ASCII 범위만 사용한 경우 (UTF-8로 기본 생성)
Case 2: 한글이 포함된 경우 (UTF-8로 생성)

[명시적 문자셋 지정이 필요한 경우]
Case 1 : 문자열 → byte[]로 변환하기 위한 String 클래스 인스턴스 메서드 getByte() :
byte[] getBytes() / 문자열을 디폴트 문자셋(charset)을 이용해 byte[]로 변환
byte[] getBytes(Charset charset) / 문자열을 매개 변수 charset 문자셋(charset)을 이용해 byte[]로 변환
byte[] getBytes(String charsetName) / 문자열을 매개 변수 charsetName 이름의 문자셋(charset)을 이용해 byte[]로 변환
// 문자열 → byte[]로 변환하는 경우 : 어떤 문자셋을 사용하느냐에 따라 2 byte 또는 3 byte로 쪼개어 byte[]로 변환

Case 2 : byte[] → 문자열로 변환하기 위한 String 생성자 :
String(byte[] bytes) / 매개 변수 bytes를 디폴트 문자셋(charset)을 이용해 문자열로 변환
String(byte[] bytes, Charset charset) / 매개 변수 bytes를 매개 변수 charset 문자셋을 이용해 문자열 변환
String(byte[] bytes, String charsetName) / 매개 변수 bytes를 매개 변수 charsetName 문자셋을 이용해 문자열 변환
String(byte bytes[], int offset, int length, Chasrset charset) / 매개 변수 bytes의 offset 위치에서부터 length개를 읽은 후 매개 변수 charset 문자셋을 이용해 문자열 변환
String(byte bytes[], int offset, int length, String charsetName) / 매개 변수 bytes의 offset 위치에서부터 length개를 읽어 매개 변수 charsetName 문자셋을 이용해 문자열 변환
// byte[] → 문자열로 변환하는 경우 : 어떤 문자셋을 사용하느냐에 따라 2 byte 또는 3 byte를 묶어 문자로 변환 필요

[Java IO(Input/Output)의 개념]
Java IO : 입력(Input)과 출력(Output)으로 구성

키보드 / 마우스 / 파일 / 네트워크
↓ (입력) (외부 → 프로그램)
byte 단위의 입력 → InputStream (추상 클래스)
char 단위의 입력 → Reader (추상 클래스)
↓
프로그램 (입력과 출력의 기준)
↓
byte 단위의 출력 → OutputStream (추상 클래스)
char 단위의 출력 → Writer (추상 클래스)
↓ (출력) (프로그램 → 외부)
화면 / 프린터 / 파일 / 네트워크

[byte 단위의 입출력(InputStream/OutputStream)]
InputStream : byte 단위 입력을 수행하는 추상 클래스

byte 단위 입력을 위한 최상위 클래스와 이를 구현한 자식 클래스의 상속 구조 :
InputStream (abstract class) - (객체) System.in
↑
FileInputStream (class)
FilterInputStream (class) ← BufferedInputStream (class) / DataInputStream(class)

byte 단위 출력을 위한 최상위 클래스와 이를 구현한 자식 클래스의 상속 구조 :
OutputStream : byte 단위 출력을 수행하는 추상 클래스
OutputStream (abstract class)
↑
FileOutputStream (class)
FilterOutputStream (class) ← BufferedOutputStream (class) / DataOutputStream (class) / PrintStream (class) - (객체) System.out

[InputStream의 주요 메서드]
int available() / InputStream의 남은 바이트 수를 리턴
abstact int read() / int(4 byte)의 하위 1 byte에 읽은 데이터를 저장해 리턴 (추상 메서드) (실제 읽은 데이터는 1 byte. int(4 byte)의 마지막 byte 위치에 저장. 읽은 데이터가 있는 경우 항상 + 값 리턴. 더 이상 읽을 데이터 없는 경우 - 값 리턴)
int read(byte[] b) / 읽은 데이터를 byte[] b의 0번째 위치부터 저장하며 읽은 바이트 수를 리턴
int read(byte[] b, int off, int len) / length 개수만큼 읽은 데이터를 byte[] b의 offset 위치부터 저장
void close() / InputStream의 자원 반환

Q. read() 메서드 하나만 추상 메서드이니까 껍데기만 아래처럼 overriding한 MyInputStream 클래스를 생성하고 나머지 완성된 메서드만(read(byte[] b), read(byte[] b, int off, int len)을 가지고 있으면 될까?
class MyInputStream extends InputStream {
@override
int read() {
}
}
ANS. 다른 read() 메서드에서 추상 메서드 read()를 내부적으로 사용
속도를 위해 read() 메서드는 JNI(Java native interface)를 이용하여 오버라이딩
↓ native int read();
편의를 위해 이미 JNI로 read()를 오버라이딩 한 하위클래스를 사용하여 InputStream 객체 생성 (FileInputStream 등)

[OutputStream의 주요 메서드]
void flush() / 메모리 버퍼에 저장된 output Stream 내보내기 (실제 출력 수행)
abstract void write(int b) / int(4 byte)의 하위 1 byte를 output 버퍼에 출력 (추상 메서드)
void write(byte[] b) / 매개 변수로 넘겨진 byte[] b의 0번째 위치부터 메모리 버퍼에 출력
void write(byte[] b, int off, int len) / byte[]의 offset 위치에서부터 length 개수를 읽어와 출력
void close() / OutputStream의 자원 반환

Q. write(int b) 메서드 하나만 추상 메서드이니까 껍데기만 아래처럼 overriding한 MyOutputStream 클래스를 생성하고 나머지 완성된 메서드만(write(byte[] b), write(byte[] b, int off, int len)을 가지고 있으면 될까?
class MyOutputStream extends OutputStream {
@override
void write(int b) {
}
}
ANS. 다른 write() 메서드에서 추상 메서드 write(int b)를 내부적으로 사용
속도를 위해 write(int b) 메서드는 JNI를 이용하여 오버라이딩
↓ native int write();
편의를 위해 이미 JNI로 write()를 오버라이딩 한 하위클래스를 사용하여 OutputStream 객체 생성

[FileInputStream으로 InputStream 객체 생성]
FileInputStream : File의 내용을 byte 단위로 데이터를 읽는 InputStream을 상속한 클래스

[FileInputStream 객체를 생성하기 위한 생성자]
FileInputStream(File file) / 매개 변수로 넘어온 file을 읽기 위한 InputStream 생성
FileInputStream(String name) / 매개 변수로 넘어온 name 위치의 파일을 읽기 위한 InputStream 생성

[FileInputStream 객체 생성]
Application
↑ FileInputStream
File
// FileInputStream이란 Application 쪽으로 흐르는 단방향 빨대를 꼽는 개념

FileInputStream 생성자를 이용한 객체 생성 :
// 파일 객체 생성
File inFile = new File("infile.txt");
// FileInputStream 객체 생성
InputStream fis = new FileInputStream(infile);
// 파일 경로로 바로 FileInputStream 객체 생성
InputStream fis = new FileInputStream("infile.txt");

파일은 항상 0번 위치부터 읽거나 쓰기 가능 (RandomAccessFile 제외)

[FileOutputStream으로 OutputStream 객체 생성]
FileOutputStream : File에 byte 단위로 데이터를 쓰는 OutputStream을 상속한 클래스

[FileOutputStream의 생성자]
FileOutputStream(File file) / 매개 변수로 넘어온 file을 쓰기 위한 OutputStream 생성. append = true 일 때 이어쓰기, append = false 일 때 덮어쓰기 (default = false)
FileOutputStream(File file, boolean append) / 매개 변수로 넘어온 file을 쓰기 위한 OutputStream 생성. append = true 일 때 이어쓰기, append = false 일 때 덮어쓰기 (default = false)
FileOutputStream(String name) / 매개 변수로 넘어온 name 위치의 파일을 쓰기 위한 OutputStream 생성. append = true 일 때 이어쓰기, append = false 일 때 덮어쓰기 (default = false)
FileOutputStream(String name, boolean append) / 매개 변수로 넘어온 name 위치의 파일을 쓰기 위한 OutputStream 생성. append = true 일 때 이어쓰기, append = false 일 때 덮어쓰기 (default = false)

[FileOutputStream 객체 생성]
Application
↓ FileOutputStream
File
// FileOutputStream이란 File 쪽으로 흐르는 단방향 빨대를 꼽는 개념

FileOutputStream 생성자를 이용한 객체 생성 :
// 파일 객체 생성
File outFile1 = new File("outfile1.txt");
File outFile2 = new File("outfile2.txt");
// FileOutputStream 객체 생성
OutputStream fos1 = new FileOutputStream(outFile1);
OutputStream fos2 = new FileOutputStream(outFile2, true);
// 파일 경로로 바로 FileOutputStream 객체 생성
OutputStream fos1 = new FileOutputStream("outfile1.txt");
OutputStream fos2 = new FileOutputStream("outfile2.txt", true);

[콘솔로 InputStream 사용]
FileDescriptor.in과 FileDescriptor.out을 이용한 콘솔 입출력 :
InputStream is = new FileInputStream(FileDescriptor.in); // 콘솔 입력 스트림 설정
OutputStream os = new FileOutputStream(FileDescriptor.out); // 콘솔 입력 스트림 설정
// 위 방법보다는 자바에서 이미 콘솔의 입출력을 위해 제공된 객체를 사용하는 것이 가장 간단한 방법. 입력을 하는 데는 InputStream 타입의 System.in 객체가 제공되며, 출력을 하는 데는 PrintStream 타입의 System.out 객체가 제공

[System.in]
자바 API에서 제공하는 콘솔 입력을 위한 InputStream 객체

System.in 콘솔 입력의 특징 :
Console 입력이 InputStream으로 전달되는 시점 : 엔터(Enter) 입력 (즉, 한 줄 단위로만 입력 처리)

Java API에서 콘솔 입력용으로 하나의 객체를 생성하여 제공 → close()로 자원 해제하면 이후 콘솔 입력 불가

Enter의 입력 시점을 알아내는 방법 : ASCII 코드값 확인
Windows → ASCII = '\r'(13) + '\n'(10)
Mac → ASCII = '\n'(10)

윈도우에서 실제 입력된 데이터까지만 읽어 화면에 출력하는 예 :
While((data = is.read()) != '\r') // \r은 윈도우에서 Enter의 시작점. 버퍼에는 여전히 \n이 남아 있어 연속 입력을 하는 경우 in.read()로 buffer를 비워야 함
System.out.println(data);
While((data = is.read()) != 13) // 13은 윈도우에서 Enter의 시작점. 버퍼에는 여전히 \n이 남아 있어 연속 입력을 하는 경우 in.read()로 buffer를 비워야 함
System.out.println(data);

맥에서 실제 입력된 데이터까지만 읽어 화면에 출력하는 예 :
While((data = is.read()) != '\n') // \n은 맥에서 Enter의 시작점
System.out.println(data);
While((data = is.read()) != 10) // 10은 맥에서 Enter의 시작점
System.out.println(data);

InputStream 객체 참조 :
InputStream is = System.in;
// 자원 반납을 하는 경우 이후에는 콘솔 입력 불가
// 일반적으로 System.in은 자원 반납 하지 않음
// 콘솔 입력은 한 줄 단위로 입력되기 때문에 일반적으로 반복문이 아닌 크기가 큰 배열로 입력 처리

[System.out]
자바 API에서 제공하는 콘솔 출력을 위한 OutputStream(PrintStream) 객체

System.out 콘솔 출력의 특징 :
Java API에서 콘솔 출력용으로 하나의 객체를 생성하여 제공 → close()로 자원 해제하면 이후 콘솔 입력 불가

출력시 엔터(개행)의 표현은 \r+\n, \n 모두 가능

write() 메서드는 버퍼에 쓰기를 수행 + flush() 메서드는 버퍼의 내용을 콘솔로 출력 (반드시 flush() 사용하여야 함)

System.out을 이용해 콘솔을 출력할 때 write() 메서드와 flush() 메서드의 동작 :
출력 내용
↓ write()
출력 버퍼
↓ flush()
콘솔 출력

// write() + flush()
OutputStrema os = System.out;
os.write('A'); // 출력 내용 → 버퍼
os.flush(); // 버퍼 → 콘솔

// write() + flush()
OutputStrema os = System.out;
os.write(65); // 출력 내용 → 버퍼
os.flush(); // 버퍼 → 콘솔

다양한 flush()의 생략 조건 :
내부적으로 버퍼를 사용하지 않는 경우
write(int)를 사용하는 경우 write('\n')이 포함되는 경우 자동 flush();
write(byte[], ...)의 경우 자동 flush()
// 굳이 구분하지 말고 write() 다음에는 flush()를 쓸 것

[FilterInputStream과 FilterOutputStream]
입출력 스트림의 형태 특징의 변경. 원하는 형태 또는 특징을 가지는 스트림

FilterInputStream
↑
BufferedInputStream / DataInputStream

FilterOutputStream
↑
BufferedOutputStream / DataOutputStream / printStream

[BufferedInputStream과 BufferedOutputStream]
입출력 과정에서 메모리 버퍼를 사용해 속도를 향상시키는 클래스. 일단 쓰고자 하는 데이터를 메모리 버퍼에 기록하고 한 번씩 모아 파일에 씀

BufferedInputStream의 2가지 생성자 :
BufferedInputStream(InputStream in) // Default Buffer Size 사용
BufferedInputStream(InputStream in, int size) // Buffer Size를 직접 지정 가능

BufferedInputStream 객체 생성의 예 :
File orgfile = new File("mycat_origin.jpg");
InputStream is = new FileInputStream(orgfile);
BufferedInputStream bis = new BufferedInputStream(is);

BufferedOutputStream의 2가지 생성자 :
BufferedOutputStream(OutputStream os) // Default Buffer Size 사용
BufferedOutputStream(OutputStream os, int size) // Buffer Size를 직접 지정 가능

[DataInputStream과 DataOutputStream]
입출력 과정에서 다양한 데이터 타입(int, long, float, double, String 등)으로 입출력을 지원하는 클래스

DataInputStream 생성자 :
DataInputStream(InputStream in)

DataInputStream 객체 생성의 예 :
File datafile = new File("file1.data");
InputStream is = new FileInputStream(datafile);
DataInputStream dis = new DataInputStream(is);

DataOutputStream 생성자 :
DataOutputStream(OutputStream out)

DataOutputStream 객체 생성의 예 :
File datafile = new File("file1.data");
OutputStream os = new FileOutputStream(datafile);
DataOutputStream dos = new DataOutputStream(os);

DataInputStream 클래스의 대표적인 메서드 :
(상속받은 메서드)
int read(byte[] b)
int read(byte[] b, int off, int len)
(추가 메서드)
boolean readBoolean()
byte readByte()
char readChar()
short readShort()
int readInt()
long readLong()
float readFloat()
double readDouble()
String readUTF()

DataOutputStream 클래스의 대표적인 메서드 :
(상속받은 메서드)
void write(int b)
void write(byte[] b, int off, int len)
(추가 메서드)
void writeBoolean(boolean v)
void writeByte(int v)
void writeChar(int v)
void writeShort(int v)
void writeInt(int v)
void writeLong(long v)
void writeFloat(float v)
void writeDouble(double v)
void writeUTF(String str)
void writeBytes(String s)

필터 조합 (Buffered(Input/Output)Stream + Data(Input/Output)Stream) :
각각의 생성자 매개 변수로는 InputStream과 OutputStream 객체가 들어가는데 Filter(Input/Output)Stream도 InputStream과 OutputStream의 자식 클래스이므로 매개 변수로 사용될 수 있기 때문
향상된 속도로 다양한 타입의 입출력 수행 (이외에도 다양한 조합이 가능)

[PrintStream]
다양한 타입의 출력에 특화된 클래스. 자동 flush() 기능을 제공하기 때문에 따로 flush() 메서드를 호출할 필요가 없음. System.out의 객체 타입이 바로 PrintStream (즉, System.out.println()은 PrintStream 클래스의 인스턴스 메서드인 println()을 호출해 왔던 것)

PrintStream 생성자 :
// 1. 출력할 파일을 매개 변수로 직접 받는 경우
PrintStream(File file)
PrintStream(String fileName)
// 2. OutputStream을 매개 변수로 받는 경우
PrintStream(OutputStream out)
PrintStream(OutputStream out, boolean autoFlush)
// 파일의 위치 정보는 File 객체 또는 파일의 경로를 나타내는 문자열로 전달. 모든 Filter(Input/Output)Stream들은 InputStream 또는 OutputStream을 생성자 매개 변수로 받음)

PrintStream의 메서드 :
(개행 포함)
void println(boolean b)
void println(char c)
void println(int i)
void println(long l)
void println(float f)
void println(double d)
void println(String s)
void println(Object obj)
void print() // 출력값 없이 단순히 개행만 수행

(개행 미포함)
void print(boolean b)
void print(char c)
void print(int i)
void print(long l)
void print(float f)
void print(double d)
void print(String s)
void print(Object obj)
PrintStream printf(String format, Object... args) // 연속 호출 가능

File
↓
FileOutputStream
↓
PrintStream

File
↓
PrintStream

Console
↓
OutputStream
↓
PrintStream

[char 단위 입출력]
문자열 입출력을 위해 특화된 기법

Reader(char 단위 입력을 수행하는 추상 클래스)와 Writer(char 단위 출력을 수행하는 추상 클래스)의 상속 구조 :
Reader (abstract class)
↑
FileReader (class) / BufferedReader (class) / InputStreamReader (class)

Writer (abstract class)
↑
FileWriter (class) / BufferedWriter (class) / OutputStreamWriter (class) / PrintWriter (class)

Reader 클래스의 주요 메서드 :
int skip(long n) / n개의 char 스킵하기 (실제 스킵된 char 개수를 리턴)
int read() / int(4 byte)의 하위 2 byte에 읽은 데이터를 저장해 리턴
int read(char[] cbuf) / 읽은 데이터를 char[] cbuf에 저장하고 읽은 char 개수를 리턴
abstract int read(char[] cbuf, int off, int len) / length 개수만큼 읽은 데이터를 char[] cbuf의 offset 위치부터 저장 (추상 메서드)
abstract void close() / Reader의 자원 반환

Q. read() 메서드 하나만 추상 메서드이니까 껍데기만 아래처럼 overriding한 MyReader 클래스를 생성하고 나머지 완성된 메서드만(read(), read(char[] cbuf))을 가지고 읽으면 될까?

class MyReader extends Reader {
@override
int read(char[] cbuf, int off, int len) {
}
}
ANS. 다른 read() 메서드에서 추상 메서드 read()를 내부적으로 사용
속도를 위해 read() 메서드는 JNI를 이용하여 오버라이딩
↓ native int read(){}
편의를 위해 이미 JNI로 read()를 오버라이딩 한 하위 클래스를 사용하여 Reader 객체 생성

Writer 클래스의 주요 메서드 :
abstract void flush() / 메모리 버퍼에 저장된 데이터 내보내기 (실제 출력 수행) (추상 메서드)
void write(int c) / int(4 byte)의 하위 2 byte를 메모리 버퍼에 출력
void write(char[] cbuf) / 매개 변수로 넘겨진 char[] cbuf 데이터를 메모리 버퍼에 출력
void write(String str) / 매개 변수로 넘겨진 String 값을 메모리 버퍼에 출력
void write(String str, int off, int len) / str의 offset 위치에서부터 length 개수를 읽어 메모리 버퍼에 출력 (추상 메서드)
abstract void write(char[] cbuf, int off, int len) / char[]의 offset 위치에서부터 length 개수를 읽어 출력 (추상 메서드)
abstract void close() / Writer의 자원 반환 (추상 메서드)

Q. write() 메서드 하나만 추상 메서드이니까 껍데기만 아래처럼 overriding한 MyWriter 클래스를 생성하고 나머지 완성된 메서드만(write(char c), write(char[] b), write(String str)) 등을 가지고 읽으면 될까?

class MyWriter extends Writer {
@override
int write(...) {
}
}
ANS. 다른 write() 메서드에서 추상 메서드 write()를 내부적으로 사용
속도를 위해 abstract write() 메서드는 JNI를 이용하여 오버라이딩
↓ native int write(){}
편의를 위해 이미 JNI로 write()를 오버라이딩 한 하위 클래스를 사용하여 Writer 객체 생성

FileReader와 FileWriter :
파일로부터 문자열을 읽거나 파일에 문자열을 저장하는 데 사용하는 클래스. 입출력을 char 단위로 수행
// char 단위 입출력을 수행한다는 의미는 문자열에 영문만 있든 한글 등의 다국어 문자가 포함돼 있든 차이가 전혀 없다는 것을 의미 (char 타입 자체가 다국어 문자를 저장할 수 있는 유니코드이기 때문)

FileReader 객체 생성을 위한 생성자 :
FileReader(File file) / 매개 변수로 넘어온 file을 읽기 위한 Reader 생성
FileReader(String fileName) / 매개 변수로 넘어온 name 위치의 파일을 읽기 위한 Reader 생성

FileReader 객체 생성 :
File readerwriterFile = new File("ReaderWriterFile.txt");
Reader reader = new FileReader(readerwriterFile);

FileWriter의 생성자 :
FileWriter(File file) / 매개 변수로 넘어온 file을 쓰기 위한 Writer 생성. append = true 일 때 이어쓰기, append = false 일 때 덮어쓰기 (default = false)
FileWriter(File file, boolean append) / 매개 변수로 넘어온 file을 쓰기 위한 Writer 생성. append = true 일 때 이어쓰기, append = false 일 때 덮어쓰기 (default = false)
FileWriter(String name) / 매개 변수로 넘어온 name 위치의 파일을 쓰기 위한 Writer 생성. append = true 일 때 이어쓰기, append = false 일 때 덮어쓰기 (default = false)
FileWriter(String name, boolean append) / 매개 변수로 넘어온 name 위치의 파일을 쓰기 위한 Writer 생성. append = true 일 때 이어쓰기, append = false 일 때 덮어쓰기 (default = false)

FileWriter 객체 생성 :
File readerwriterFile = new File("ReaderWriterFile.txt");
Writer writer = new FileWriter(readerwriterFile);

// 문자열 → char[] 변환하는 String 클래스의 메서드
public char[] toCharArray()

[BufferedReader와 BufferedWriter로 속도 개선]
char 단위의 입출력 과정에서 메모리 버퍼를 사용함으로써 속도를 향상시키는 클래스

BufferedReader와 BufferedWriter 클래스의 상속 구조 :
Reader (abstract class)
↑
FileReader (class) / BufferedReader (class) / InputStreamReader (class)

Writer (abstract class)
↑
FileWriter (class) / BufferedWriter (class) / OutputStreamWriter (class) / PrintWriter (class)

BufferedReader의 2가지 생성자 :
BufferedReader(Reader in) // Default Buffer Size 사용
BufferedReader(Reader in, int size) // Buffer Size를 직접 지정 가능

BufferedReader 객체 생성의 예 :
File bufferedReaderFile = new File("BufferedReaderFile.txt");
Reader reader = new FileReader(bufferedReaderFile);
BufferedReader br = new BufferedReader(reader);

// BufferedReader 클래스에서 특이한 점은 단순히 속도의 향상뿐 아니라 매우 편리하게 사용될 수 있는 readLine() 메서드가 추가됐다는 것
public String readLine() // 1줄씩 읽어 문자열로 리턴하는 메서드
readLine() 메서드가 1줄씩 읽은 데이터를 String 타입으로 리턴하다 보니 파일의 마지막은 -1이 아니라 null의 값을 포함하고 있음

BufferedWriter의 2가지 생성자 :
BufferedWriter(Writer out) // Default Buffer Size 사용
BufferedWriter(Writer out, int size) // Buffer Size를 직접 지정 가능

BufferedWriter 객체 생성의 예 :
File bufferedWriterFile = new File("BufferedWriterFile.txt");
Writer writer = new FileWriter(bufferedWriterFile);
BufferedWriter bw = new BufferedWriter(writer);

[InputStreamReader와 OutputStreamWriter]
Byte 단위로 입출력을 수행한 객체(InputStream, OutputStream)를 Char 단위의 입출력 객체(Reader, Writer)로 변환할 때 사용하는 클래스

InputStreamReader와 OutputStreamWriter 클래스의 상속 구조 :
Reader (abstract class)
↑
FileReader (class) / BufferedReader (class) / InputStreamReader (class)

Writer (abstract class)
↑
FileWriter (class) / BufferedWriter (class) / OutputStreamWriter (class) / PrintWriter (class)

InputStreamReader의 3가지 생성자 :
InputStreamReader(InputStream in)
InputStreamReader(InputStream in, Charset cs) // 매개 변수로 전달되는 문자셋을 기준으로 byte 단위 → char 단위로 변환
InputStreamReader(InputStream in, String charsetName)

InputStreamReader를 이용한 InputStream → Reader 변환 예 :
File inputStreamReaderTest = new File("test.txt");
InputStream is = new FileInputStream(inputStreamReaderTset);
Reader isr = new InputStreamReader(is, "UTF-8");

OutputStreamWriter의 3가지 생성자 :
OutputStreamWriter(OutputStream out)
OutputStreamWriter(OutputStream out, Charset cs) // 매개 변수로 전달되는 문자셋을 기준으로 byte 단위 → char 단위로 변환
OutputStreamWriter(OutputStream out, String charsetName)

OutputStreamWriter를 이용한 OutputStream → Writer 변환 예 :
File outputStreamWriterTest = new File("test.txt");
OutputStream os = new FileOutputStream(outputStreamWriterTset);
Writer osw = new OutputStreamWriter(os, "UTF-8");

// FileReader를 이용해 MS949 문자셋 텍스트 파일 읽기 (기본값 문자셋 UTF-8)
File inputStreamReader = new File("InputStreamReader.txt");
try (Reader reader = new FileReader(inputStreamReader);) {
int data;
while ((data = reader.read()) != -1) {
System.out.println((char) data);
}
} catch (IOException e) {
}

// InputStreamReader를 이용해 MS949 문자셋 텍스트 파일 읽기 (기본값 문자셋 UTF-8)
try (InputStream is = new FileInputStream(inputStreamReader);
InputStreamReader isr = new InputStreamReader(is, "MS949")) {
int data;
while ((data = isr.read()) != -1) {
System.out.println((char) data);
}
} catch (IOException e) {
}

[PrintWriter]
PrinterStream과 같이 다양한 타입의 출력에 특화된 클래스. 자동 flush() 기능 제공 (autoFlush = true) 또는 자원 반납시 autoFlush 됨

PrintWriter의 상속 구조 :
Writer (abstract class)
↑
FileWriter (class) / BufferedWriter (class) / OutputStreamWriter (class) / PrintWriter (class)

PrintWriter의 생성자 (매개변수 : 파일, OutputStream, Writer) :
PrintWriter(File file)
PrintWriter(String fileName)
PrintWriter(OutputStream out)
PrintWriter(OutputStream out, boolean autoFlush)
PrintWriter(Writer out) // Byte 단위 IO인 PrintStream과의 차이점
PrintWriter(Writer out, boolean autoFlush) // Byte 단위 IO인 PrintStream과의 차이점

PrintWriter의 메서드 :
(개행 포함)
void println(boolean b)
void println(char c)
void println(int i)
void println(long l)
void println(float f)
void println(double d)
void println(String s)
void println(Object obj)
void println // 출력값 없이 단순히 개행만 수행

(개행 미포함)
void print(boolean b)
void print(char c)
void print(int i)
void print(long l)
void print(float f)
void print(double d)
void print(String s)
void print(Object obj)
PrintWriter printf(String format, Object... args) // 연속 호출 가능
// AutoFlush = true로 설정해 놓으면 자원을 반납하지 않아도 바로 출력 (자원 반납시 autoFlush됨)