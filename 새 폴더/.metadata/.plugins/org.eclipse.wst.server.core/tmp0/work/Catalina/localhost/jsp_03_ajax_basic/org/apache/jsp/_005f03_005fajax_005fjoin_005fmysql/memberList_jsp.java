/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.89
 * Generated at: 2024-08-12 10:58:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._005f03_005fajax_005fjoin_005fmysql;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.Connection;

public final class memberList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	int memberSize = 0;
	int[] memberNumberList = new int [1000];
	String[] memberIdList = new String[1000];
	String[] memberPwList =  new String[1000];
	String[] memberNameList =  new String[1000];
	String[] memberEmailList =  new String[1000];
	String[] memberPhoneList =  new String[1000];
	String[] memberAddr1List =  new String[1000];
	String[] memberAddr2List =  new String[1000];
	String[] memberAddr3List = new String[1000];
	String[] memberGenderList =  new String[1000];
	String[] memberRouteList = new String[1000];
	int[] memberMarketingList =new int [1000];
	
	
	String[] genderList = {"선택안함", "남자", "여자"};
	String[] routeList = {"기타", "인터넷 검색", "지인 권유", "SNS", "광고"};

      out.write("    \r\n");
      out.write("\r\n");

	Connection conn = null;	
	PreparedStatement pstmt = null;	
	ResultSet rs = null;
	
	
	try{
		String jdbcUrl = "jdbc:mysql://localhost:3306/_03_ajax_join_mysql?serverTimezone=UTC&useSSL=false";
		String dbId = "root";
		String dbPw = "root";
		
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn = DriverManager.getConnection(jdbcUrl, dbId, dbPw);
		
		String sql = "SELECT * FROM member";
		pstmt = conn.prepareStatement(sql);
		rs = pstmt.executeQuery();
		
		while(rs.next()){
					
			memberNumberList[memberSize] = rs.getInt(1);
			memberIdList[memberSize] = rs.getString(2);
			memberPwList[memberSize] = rs.getString(3);
			memberNameList[memberSize] = rs.getString(4);
			memberEmailList[memberSize] = rs.getString(5);
			memberPhoneList[memberSize] = rs.getString(6);
			memberAddr1List[memberSize] = rs.getString(7);
			memberAddr2List[memberSize] = rs.getString(8);
			memberAddr3List[memberSize] = rs.getString(9);
			memberGenderList[memberSize] = rs.getString(10);
			memberRouteList[memberSize] = rs.getString(11);
			memberMarketingList[memberSize] = rs.getInt(12);				
			memberSize += 1;
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		if(conn != null){ conn.close();	}
		if(pstmt != null){ pstmt.close(); }
		if(rs != null){ rs.close();	}
	}


      out.write("\r\n");
      out.write("\r\n");
      out.write("<div align=\"center\">\r\n");
      out.write("\r\n");
      out.write("	<table border=\"1\">\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td colspan=\"13\" id=\"title\"><h2>회원 전체 게시판</h2></td>\r\n");
      out.write("        </tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>아이디</td>\r\n");
      out.write("			<td>비밀번호</td>\r\n");
      out.write("			<td>이름</td>\r\n");
      out.write("			<td>이메일</td>\r\n");
      out.write("			<td>연락처</td>\r\n");
      out.write("			<td>우편번호</td>\r\n");
      out.write("			<td>주소</td>\r\n");
      out.write("			<td>남은주소</td>\r\n");
      out.write("			<td>성별</td>\r\n");
      out.write("			<td>유입경로</td>\r\n");
      out.write("			<td>마케팅 수신동의</td>\r\n");
      out.write("			<td>삭제</td>\r\n");
      out.write("			<td>수정</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	");
 for(int i=0; i<memberSize; i++) { 
      out.write("\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>");
      out.print( memberIdList[i] );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print( memberPwList[i] );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print( memberNameList[i] );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print( memberEmailList[i] );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print( memberPhoneList[i] );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print( memberAddr1List[i] );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print( memberAddr2List[i] );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print( memberAddr3List[i] );
      out.write("</td>\r\n");
      out.write("			");
 int genderIndex = Integer.parseInt(memberGenderList[i]);	
      out.write("\r\n");
      out.write("			<td>");
      out.print( genderList[genderIndex] );
      out.write("</td>\r\n");
      out.write("			");
 int routeIndex = Integer.parseInt(memberRouteList[i]); 
      out.write("\r\n");
      out.write("			<td>");
      out.print( routeList[routeIndex] );
      out.write("</td>\r\n");
      out.write("			<td>\r\n");
      out.write("				");
if(memberMarketingList[i] == 1) {
      out.write("\r\n");
      out.write("					동의\r\n");
      out.write("				");
} else{
      out.write("\r\n");
      out.write("					동의안함\r\n");
      out.write("				");
} 
      out.write("\r\n");
      out.write("				\r\n");
      out.write("			</td>\r\n");
      out.write("			<td><button>삭제</button></td>\r\n");
      out.write("			<td><button>수정</button></td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	");
 } 
      out.write("\r\n");
      out.write("	</table>\r\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
