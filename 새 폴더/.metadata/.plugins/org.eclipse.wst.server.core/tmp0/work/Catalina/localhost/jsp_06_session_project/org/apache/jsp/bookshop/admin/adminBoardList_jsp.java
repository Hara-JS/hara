/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.89
 * Generated at: 2024-08-12 10:56:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.bookshop.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.time.LocalDate;
import java.util.Arrays;
import java.time.Duration;
import java.time.Period;
import java.time.LocalDateTime;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.ArrayList;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.Connection;

public final class adminBoardList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(13);
    _jspx_imports_classes.add("java.time.Period");
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.time.LocalDateTime");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.Date");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.time.LocalDate");
    _jspx_imports_classes.add("java.time.Duration");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("	<style>\r\n");
      out.write("		td{\r\n");
      out.write("			text-align : center;\r\n");
      out.write("		}\r\n");
      out.write("	</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	");

		int 		boardSize 			= 	(int)session.getAttribute("boardSize");
		int[] 		boardNumberList 	= 	(int[])session.getAttribute("boardNumberList");
		String[] 	boardWriterList 	=  	(String[])session.getAttribute("boardWriterList");
		String[] 	boardSubjectList 	=  	(String[])session.getAttribute("boardSubjectList");
		String[] 	boardContentList 	=  	(String[])session.getAttribute("boardContentList");
		String[] 	boardDateList 		=  	(String[])session.getAttribute("boardDateList");
		int[] 		boardReadCountList 	=  	(int[])session.getAttribute("boardReadCountList");
		int[]		boardRefList 		=  	(int[])session.getAttribute("boardRefList");
		int[]		boardStepList 		=  	(int[])session.getAttribute("boardStepList");
		int[]		boardLevelList 		=  	(int[])session.getAttribute("boardLevelList");
		
		
		int 		boardImageSize 				= 	(int)session.getAttribute("boardImageSize");
		int[] 		boardImageNumberList 		= 	(int[])session.getAttribute("boardImageNumberList");
		int[] 		boardImageBoardNumberList 	=  	(int[])session.getAttribute("boardImageBoardNumberList");
		String[] 	boardImageNameList 			=	(String[])session.getAttribute("boardImageNameList");
		
		
		
		
	
      out.write('\r');
      out.write('\n');
      out.write('	');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../layout/adminHeader.jsp", out, false);
      out.write("\r\n");
      out.write("	<br><br>\r\n");
      out.write("	<div align=\"center\">\r\n");
      out.write("		<h1>관리자 게시판</h1>\r\n");
      out.write("		<h2>전체 게시글</h2>\r\n");
      out.write("		<table border=\"1\">	\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>번호</td>\r\n");
      out.write("				<td>제목</td>\r\n");
      out.write("				<td>작성자</td>\r\n");
      out.write("				<td>작성일</td>\r\n");
      out.write("				<td>조회</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			");
 for(int i = 0; i < boardSize; i++){
      out.write("\r\n");
      out.write("				\r\n");
      out.write("			<tr>\r\n");
      out.write("					\r\n");
      out.write("				<td>");
      out.print(boardNumberList[i] );
      out.write("</td>				\r\n");
      out.write("				<td>");
      out.print(boardSubjectList[i] );
      out.write("</td>				\r\n");
      out.write("				<td>");
      out.print(boardWriterList[i] );
      out.write("</td>\r\n");
      out.write("				\r\n");
      out.write("				");

					// https://developer-talk.tistory.com/643				
					LocalDateTime time = LocalDateTime.now();	
					System.out.println(LocalDateTime.now());					
					int year = time.getYear();
					int month = time.getMonthValue();
					int day = time.getDayOfMonth();
					int hour = time.getHour();
					int min = time.getMinute();
					int second = time.getSecond();
					
					System.out.println(year + " " + month + " " + day);
					System.out.println(hour + " " + min + " " + second);
					String[] dateAndTime = boardDateList[i].split(" ");
					System.out.println(Arrays.toString(dateAndTime));	
					String[] dateList = dateAndTime[0].split("-");
					
					int[] dateListInt = new int[3];
					
					for(int j = 0; j < dateList.length;j++){
						dateListInt[j] = Integer.parseInt(dateList[j]);
					}
					String[] timeList = dateAndTime[1].split(":");
					
					int[] timeListInt = new int[3];
					
					for(int j = 0; j < dateList.length;j++){
						timeListInt[j] = Integer.parseInt(timeList[j]);
					}
										
					System.out.println(Arrays.toString(dateListInt));	
					System.out.println(Arrays.toString(timeListInt));	
					
					LocalDateTime startDT1 = LocalDateTime.of(
							dateListInt[0], dateListInt[1], dateListInt[2],
							timeListInt[0], timeListInt[1], timeListInt[2]);
					
					LocalDateTime startDT2 = LocalDateTime.of(year, month, day, hour, min, second);
										
					Duration diff = Duration.between(startDT2.toLocalTime(), startDT1.toLocalTime());
					
					LocalDate startDate = LocalDate.of(dateListInt[0], dateListInt[1], dateListInt[2]);
					LocalDate endDate = LocalDate.of(year, month, day);
					Period period = Period.between(startDate, endDate);
					System.out.println("차이:"+ period.getYears());			
					System.out.println("차이:"+ period.getMonths());			
					System.out.println("차이:"+ period.getDays());						
					
				
      out.write("\r\n");
      out.write("				\r\n");
      out.write("				");
 if( period.getDays() >= 1 ){ 
      out.write("				\r\n");
      out.write("					<td>");
      out.print(dateAndTime[0] );
      out.write("</td>					\r\n");
      out.write("				");
 }else {
      out.write("				\r\n");
      out.write("					<td>");
      out.print(dateAndTime[1] );
      out.write("</td>				\r\n");
      out.write("				");
 } 
      out.write("\r\n");
      out.write("							\r\n");
      out.write("				<td>");
      out.print(boardReadCountList[i] );
      out.write("</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			");
} 
      out.write("\r\n");
      out.write("		</table>\r\n");
      out.write("		<a href=\"adminMain.jsp\">메인</a>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
